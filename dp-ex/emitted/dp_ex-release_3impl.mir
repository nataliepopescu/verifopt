// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
// HINT: See also -Z dump-mir for MIR at specific points during compilation.
fn <impl at src/main.rs:9:1: 9:20>::speak(_1: &Dog) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    scope 1 (inlined Arguments::<'_>::new_const::<1>) {
        debug pieces => const <Dog as Animal>::speak::promoted[0];
        let mut _4: &[&str];
        let mut _5: &[core::fmt::rt::Argument<'_>];
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = const <Dog as Animal>::speak::promoted[0] as &[&str] (PointerCoercion(Unsize, Implicit));
        StorageLive(_5);
        _5 = const std::fmt::Arguments::<'_>::new_const::<1>::promoted[0] as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize, Implicit));
        _3 = Arguments::<'_> { pieces: move _4, fmt: const Option::<&[core::fmt::rt::Placeholder]>::None, args: move _5 };
        StorageDead(_5);
        StorageDead(_4);
        _2 = _print(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        return;
    }
}

alloc21 (size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

const <impl at src/main.rs:9:1: 9:20>::speak::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "woof\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:17:1: 17:20>::speak(_1: &Cat) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    scope 1 (inlined Arguments::<'_>::new_const::<1>) {
        debug pieces => const <Cat as Animal>::speak::promoted[0];
        let mut _4: &[&str];
        let mut _5: &[core::fmt::rt::Argument<'_>];
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = const <Cat as Animal>::speak::promoted[0] as &[&str] (PointerCoercion(Unsize, Implicit));
        StorageLive(_5);
        _5 = const std::fmt::Arguments::<'_>::new_const::<1>::promoted[0] as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize, Implicit));
        _3 = Arguments::<'_> { pieces: move _4, fmt: const Option::<&[core::fmt::rt::Placeholder]>::None, args: move _5 };
        StorageDead(_5);
        StorageDead(_4);
        _2 = _print(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        return;
    }
}

alloc21 (size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

const <impl at src/main.rs:17:1: 17:20>::speak::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "meow\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:25:1: 25:21>::speak(_1: &Bird) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    scope 1 (inlined Arguments::<'_>::new_const::<1>) {
        debug pieces => const <Bird as Animal>::speak::promoted[0];
        let mut _4: &[&str];
        let mut _5: &[core::fmt::rt::Argument<'_>];
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = const <Bird as Animal>::speak::promoted[0] as &[&str] (PointerCoercion(Unsize, Implicit));
        StorageLive(_5);
        _5 = const std::fmt::Arguments::<'_>::new_const::<1>::promoted[0] as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize, Implicit));
        _3 = Arguments::<'_> { pieces: move _4, fmt: const Option::<&[core::fmt::rt::Placeholder]>::None, args: move _5 };
        StorageDead(_5);
        StorageDead(_4);
        _2 = _print(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        return;
    }
}

alloc21 (size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

const <impl at src/main.rs:25:1: 25:21>::speak::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "chirp\n"];
        _0 = &_1;
        return;
    }
}

fn dyn_dp() -> () {
    let mut _0: ();
    let _1: &dyn Animal;
    let mut _3: &mut rand::prelude::ThreadRng;
    let mut _4: rand::prelude::ThreadRng;
    let _5: ();
    let mut _6: &dyn Animal;
    scope 1 {
        debug a => _1;
        let _2: u32;
        scope 2 {
            debug num => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_3);
        StorageLive(_4);
        _4 = rng() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _4;
        _2 = <ThreadRng as Rng>::random_range::<u32, RangeTo<u32>>(move _3, const RangeTo::<u32> {{ end: 3_u32 }}) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        StorageDead(_3);
        drop(_4) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_4);
        switchInt(move _2) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        _1 = const dyn_dp::promoted[0] as &dyn Animal (PointerCoercion(Unsize, Implicit));
        goto -> bb9;
    }

    bb5: {
        switchInt(move _2) -> [1: bb6, otherwise: bb7];
    }

    bb6: {
        _1 = const dyn_dp::promoted[1] as &dyn Animal (PointerCoercion(Unsize, Implicit));
        goto -> bb8;
    }

    bb7: {
        _1 = const dyn_dp::promoted[2] as &dyn Animal (PointerCoercion(Unsize, Implicit));
        goto -> bb8;
    }

    bb8: {
        goto -> bb9;
    }

    bb9: {
        StorageLive(_6);
        _6 = copy _1;
        _5 = <dyn Animal as Animal>::speak(move _6) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_6);
        StorageDead(_1);
        return;
    }

    bb11 (cleanup): {
        drop(_4) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

const dyn_dp::promoted[0]: &Bird = {
    let mut _0: &Bird;
    let mut _1: Bird;

    bb0: {
        _1 = Bird;
        _0 = &_1;
        return;
    }
}

const dyn_dp::promoted[1]: &Cat = {
    let mut _0: &Cat;
    let mut _1: Cat;

    bb0: {
        _1 = Cat;
        _0 = &_1;
        return;
    }
}

const dyn_dp::promoted[2]: &Dog = {
    let mut _0: &Dog;
    let mut _1: Dog;

    bb0: {
        _1 = Dog;
        _0 = &_1;
        return;
    }
}

fn static_dp() -> () {
    let mut _0: ();
    let _1: ();
    scope 1 {
        debug cat => const static_dp::promoted[0];
    }

    bb0: {
        _1 = <Cat as Animal>::speak(const static_dp::promoted[0]) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const static_dp::promoted[0]: &Cat = {
    let mut _0: &Cat;
    let mut _1: Cat;

    bb0: {
        _1 = Cat;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = dyn_dp() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = static_dp() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}
