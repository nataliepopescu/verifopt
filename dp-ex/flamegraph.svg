<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="14801991"><g><title>&lt;dyn_dispatch_ex::Cat as dyn_dispatch_ex::Animal&gt;::speak (568,880 samples, 3.84%)</title><rect x="0.0000%" y="517" width="3.8433%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="527.50">&lt;dyn..</text></g><g><title>std::io::stdio::_print (568,880 samples, 3.84%)</title><rect x="0.0000%" y="501" width="3.8433%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="511.50">std:..</text></g><g><title>std::io::stdio::print_to (568,880 samples, 3.84%)</title><rect x="0.0000%" y="485" width="3.8433%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="495.50">std:..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (568,880 samples, 3.84%)</title><rect x="0.0000%" y="469" width="3.8433%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="479.50">&lt;std..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (568,880 samples, 3.84%)</title><rect x="0.0000%" y="453" width="3.8433%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="463.50">&lt;&amp;st..</text></g><g><title>std::io::Write::write_fmt (568,880 samples, 3.84%)</title><rect x="0.0000%" y="437" width="3.8433%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="447.50">std:..</text></g><g><title>core::fmt::write (568,880 samples, 3.84%)</title><rect x="0.0000%" y="421" width="3.8433%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="431.50">core..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (568,880 samples, 3.84%)</title><rect x="0.0000%" y="405" width="3.8433%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="415.50">&lt;std..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (568,880 samples, 3.84%)</title><rect x="0.0000%" y="389" width="3.8433%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="399.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (568,880 samples, 3.84%)</title><rect x="0.0000%" y="373" width="3.8433%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="383.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (568,880 samples, 3.84%)</title><rect x="0.0000%" y="357" width="3.8433%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="367.50">&lt;std..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (568,880 samples, 3.84%)</title><rect x="0.0000%" y="341" width="3.8433%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="351.50">&lt;std..</text></g><g><title>std::io::Write::write_all (568,880 samples, 3.84%)</title><rect x="0.0000%" y="325" width="3.8433%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="335.50">std:..</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (568,880 samples, 3.84%)</title><rect x="0.0000%" y="309" width="3.8433%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="319.50">&lt;std..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (568,880 samples, 3.84%)</title><rect x="0.0000%" y="293" width="3.8433%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="303.50">std:..</text></g><g><title>__GI___libc_write (568,880 samples, 3.84%)</title><rect x="0.0000%" y="277" width="3.8433%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="287.50">__GI..</text></g><g><title>[unknown] (568,880 samples, 3.84%)</title><rect x="0.0000%" y="261" width="3.8433%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="271.50">[unk..</text></g><g><title>[unknown] (568,880 samples, 3.84%)</title><rect x="0.0000%" y="245" width="3.8433%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="255.50">[unk..</text></g><g><title>[unknown] (568,880 samples, 3.84%)</title><rect x="0.0000%" y="229" width="3.8433%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="239.50">[unk..</text></g><g><title>[unknown] (568,880 samples, 3.84%)</title><rect x="0.0000%" y="213" width="3.8433%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="223.50">[unk..</text></g><g><title>[unknown] (568,880 samples, 3.84%)</title><rect x="0.0000%" y="197" width="3.8433%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="207.50">[unk..</text></g><g><title>[unknown] (568,880 samples, 3.84%)</title><rect x="0.0000%" y="181" width="3.8433%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="191.50">[unk..</text></g><g><title>[unknown] (568,880 samples, 3.84%)</title><rect x="0.0000%" y="165" width="3.8433%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="175.50">[unk..</text></g><g><title>[unknown] (568,880 samples, 3.84%)</title><rect x="0.0000%" y="149" width="3.8433%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="159.50">[unk..</text></g><g><title>[unknown] (568,880 samples, 3.84%)</title><rect x="0.0000%" y="133" width="3.8433%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="143.50">[unk..</text></g><g><title>[unknown] (568,880 samples, 3.84%)</title><rect x="0.0000%" y="117" width="3.8433%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="568880"/><text x="0.2500%" y="127.50">[unk..</text></g><g><title>dyn_dispatch_ex::dyn_dispatch (4,168,131 samples, 28.16%)</title><rect x="0.0000%" y="533" width="28.1593%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="4168131"/><text x="0.2500%" y="543.50">dyn_dispatch_ex::dyn_dispatch</text></g><g><title>&lt;dyn_dispatch_ex::Dog as dyn_dispatch_ex::Animal&gt;::speak (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="517" width="24.3160%" height="15" fill="rgb(238,160,17)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="527.50">&lt;dyn_dispatch_ex::Dog as dyn_dispatch_e..</text></g><g><title>std::io::stdio::_print (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="501" width="24.3160%" height="15" fill="rgb(214,148,48)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="511.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="485" width="24.3160%" height="15" fill="rgb(232,36,49)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="495.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="469" width="24.3160%" height="15" fill="rgb(209,103,24)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="479.50">&lt;std::io::stdio::Stdout as std::io::Wri..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="453" width="24.3160%" height="15" fill="rgb(229,88,8)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="463.50">&lt;&amp;std::io::stdio::Stdout as std::io::Wr..</text></g><g><title>std::io::Write::write_fmt (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="437" width="24.3160%" height="15" fill="rgb(213,181,19)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="447.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="421" width="24.3160%" height="15" fill="rgb(254,191,54)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="431.50">core::fmt::write</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="405" width="24.3160%" height="15" fill="rgb(241,83,37)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="415.50">&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; ..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="389" width="24.3160%" height="15" fill="rgb(233,36,39)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="399.50">&lt;std::io::stdio::StdoutLock as std::io:..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="373" width="24.3160%" height="15" fill="rgb(226,3,54)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="383.50">&lt;std::io::buffered::linewriter::LineWri..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="357" width="24.3160%" height="15" fill="rgb(245,192,40)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="367.50">&lt;std::io::buffered::linewritershim::Lin..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="341" width="24.3160%" height="15" fill="rgb(238,167,29)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="351.50">&lt;std::io::stdio::StdoutRaw as std::io::..</text></g><g><title>std::io::Write::write_all (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="325" width="24.3160%" height="15" fill="rgb(232,182,51)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="335.50">std::io::Write::write_all</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="309" width="24.3160%" height="15" fill="rgb(231,60,39)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="319.50">&lt;std::sys::stdio::unix::Stdout as std::..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="293" width="24.3160%" height="15" fill="rgb(208,69,12)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="303.50">std::sys::pal::unix::fd::FileDesc::write</text></g><g><title>__GI___libc_write (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="277" width="24.3160%" height="15" fill="rgb(235,93,37)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="287.50">__GI___libc_write</text></g><g><title>[unknown] (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="261" width="24.3160%" height="15" fill="rgb(213,116,39)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="271.50">[unknown]</text></g><g><title>[unknown] (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="245" width="24.3160%" height="15" fill="rgb(222,207,29)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="255.50">[unknown]</text></g><g><title>[unknown] (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="229" width="24.3160%" height="15" fill="rgb(206,96,30)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="239.50">[unknown]</text></g><g><title>[unknown] (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="213" width="24.3160%" height="15" fill="rgb(218,138,4)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="223.50">[unknown]</text></g><g><title>[unknown] (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="197" width="24.3160%" height="15" fill="rgb(250,191,14)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="207.50">[unknown]</text></g><g><title>[unknown] (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="181" width="24.3160%" height="15" fill="rgb(239,60,40)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="191.50">[unknown]</text></g><g><title>[unknown] (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="165" width="24.3160%" height="15" fill="rgb(206,27,48)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="175.50">[unknown]</text></g><g><title>[unknown] (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="149" width="24.3160%" height="15" fill="rgb(225,35,8)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="159.50">[unknown]</text></g><g><title>[unknown] (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="133" width="24.3160%" height="15" fill="rgb(250,213,24)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="143.50">[unknown]</text></g><g><title>[unknown] (3,599,251 samples, 24.32%)</title><rect x="3.8433%" y="117" width="24.3160%" height="15" fill="rgb(247,123,22)" fg:x="568881" fg:w="3599251"/><text x="4.0933%" y="127.50">[unknown]</text></g><g><title>dyn_dispatch_ex::static_dispatch (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="533" width="23.7779%" height="15" fill="rgb(231,138,38)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="543.50">dyn_dispatch_ex::static_dispatch</text></g><g><title>&lt;dyn_dispatch_ex::Cat as dyn_dispatch_ex::Animal&gt;::speak (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="517" width="23.7779%" height="15" fill="rgb(231,145,46)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="527.50">&lt;dyn_dispatch_ex::Cat as dyn_dispatch_..</text></g><g><title>std::io::stdio::_print (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="501" width="23.7779%" height="15" fill="rgb(251,118,11)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="511.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="485" width="23.7779%" height="15" fill="rgb(217,147,25)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="495.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="469" width="23.7779%" height="15" fill="rgb(247,81,37)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="479.50">&lt;std::io::stdio::Stdout as std::io::Wr..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="453" width="23.7779%" height="15" fill="rgb(209,12,38)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="463.50">&lt;&amp;std::io::stdio::Stdout as std::io::W..</text></g><g><title>std::io::Write::write_fmt (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="437" width="23.7779%" height="15" fill="rgb(227,1,9)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="447.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="421" width="23.7779%" height="15" fill="rgb(248,47,43)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="431.50">core::fmt::write</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="405" width="23.7779%" height="15" fill="rgb(221,10,30)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="415.50">&lt;std::io::Write::write_fmt::Adapter&lt;T&gt;..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="389" width="23.7779%" height="15" fill="rgb(210,229,1)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="399.50">&lt;std::io::stdio::StdoutLock as std::io..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="373" width="23.7779%" height="15" fill="rgb(222,148,37)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="383.50">&lt;std::io::buffered::linewriter::LineWr..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="357" width="23.7779%" height="15" fill="rgb(234,67,33)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="367.50">&lt;std::io::buffered::linewritershim::Li..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="341" width="23.7779%" height="15" fill="rgb(247,98,35)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="351.50">&lt;std::io::stdio::StdoutRaw as std::io:..</text></g><g><title>std::io::Write::write_all (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="325" width="23.7779%" height="15" fill="rgb(247,138,52)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="335.50">std::io::Write::write_all</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="309" width="23.7779%" height="15" fill="rgb(213,79,30)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="319.50">&lt;std::sys::stdio::unix::Stdout as std:..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="293" width="23.7779%" height="15" fill="rgb(246,177,23)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="303.50">std::sys::pal::unix::fd::FileDesc::wri..</text></g><g><title>__GI___libc_write (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="277" width="23.7779%" height="15" fill="rgb(230,62,27)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="287.50">__GI___libc_write</text></g><g><title>[unknown] (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="261" width="23.7779%" height="15" fill="rgb(216,154,8)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="271.50">[unknown]</text></g><g><title>[unknown] (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="245" width="23.7779%" height="15" fill="rgb(244,35,45)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="255.50">[unknown]</text></g><g><title>[unknown] (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="229" width="23.7779%" height="15" fill="rgb(251,115,12)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="239.50">[unknown]</text></g><g><title>[unknown] (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="213" width="23.7779%" height="15" fill="rgb(240,54,50)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="223.50">[unknown]</text></g><g><title>[unknown] (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="197" width="23.7779%" height="15" fill="rgb(233,84,52)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="207.50">[unknown]</text></g><g><title>[unknown] (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="181" width="23.7779%" height="15" fill="rgb(207,117,47)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="191.50">[unknown]</text></g><g><title>[unknown] (3,519,610 samples, 23.78%)</title><rect x="28.1593%" y="165" width="23.7779%" height="15" fill="rgb(249,43,39)" fg:x="4168132" fg:w="3519610"/><text x="28.4093%" y="175.50">[unknown]</text></g><g><title>[unknown] (2,937,298 samples, 19.84%)</title><rect x="32.0933%" y="149" width="19.8439%" height="15" fill="rgb(209,38,44)" fg:x="4750444" fg:w="2937298"/><text x="32.3433%" y="159.50">[unknown]</text></g><g><title>[unknown] (2,536,815 samples, 17.14%)</title><rect x="34.7989%" y="133" width="17.1383%" height="15" fill="rgb(236,212,23)" fg:x="5150927" fg:w="2536815"/><text x="35.0489%" y="143.50">[unknown]</text></g><g><title>[unknown] (2,137,827 samples, 14.44%)</title><rect x="37.4944%" y="117" width="14.4428%" height="15" fill="rgb(242,79,21)" fg:x="5549915" fg:w="2137827"/><text x="37.7444%" y="127.50">[unknown]</text></g><g><title>[unknown] (1,362,107 samples, 9.20%)</title><rect x="42.7350%" y="101" width="9.2022%" height="15" fill="rgb(211,96,35)" fg:x="6325635" fg:w="1362107"/><text x="42.9850%" y="111.50">[unknown]</text></g><g><title>[unknown] (381,838 samples, 2.58%)</title><rect x="49.3576%" y="85" width="2.5796%" height="15" fill="rgb(253,215,40)" fg:x="7305904" fg:w="381838"/><text x="49.6076%" y="95.50">[u..</text></g><g><title>[unknown] (179,251 samples, 1.21%)</title><rect x="50.7262%" y="69" width="1.2110%" height="15" fill="rgb(211,81,21)" fg:x="7508491" fg:w="179251"/><text x="50.9762%" y="79.50"></text></g><g><title>dyn_dispatch_ex::static_dispatch_rand (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="533" width="20.8253%" height="15" fill="rgb(208,190,38)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="543.50">dyn_dispatch_ex::static_dispatch_..</text></g><g><title>&lt;dyn_dispatch_ex::Cat as dyn_dispatch_ex::Animal&gt;::speak (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="517" width="20.8253%" height="15" fill="rgb(235,213,38)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="527.50">&lt;dyn_dispatch_ex::Cat as dyn_disp..</text></g><g><title>std::io::stdio::_print (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="501" width="20.8253%" height="15" fill="rgb(237,122,38)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="511.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="485" width="20.8253%" height="15" fill="rgb(244,218,35)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="495.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="469" width="20.8253%" height="15" fill="rgb(240,68,47)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="479.50">&lt;std::io::stdio::Stdout as std::i..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="453" width="20.8253%" height="15" fill="rgb(210,16,53)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="463.50">&lt;&amp;std::io::stdio::Stdout as std::..</text></g><g><title>std::io::Write::write_fmt (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="437" width="20.8253%" height="15" fill="rgb(235,124,12)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="447.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="421" width="20.8253%" height="15" fill="rgb(224,169,11)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="431.50">core::fmt::write</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="405" width="20.8253%" height="15" fill="rgb(250,166,2)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="415.50">&lt;std::io::Write::write_fmt::Adapt..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="389" width="20.8253%" height="15" fill="rgb(242,216,29)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="399.50">&lt;std::io::stdio::StdoutLock as st..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="373" width="20.8253%" height="15" fill="rgb(230,116,27)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="383.50">&lt;std::io::buffered::linewriter::L..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="357" width="20.8253%" height="15" fill="rgb(228,99,48)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="367.50">&lt;std::io::buffered::linewritershi..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="341" width="20.8253%" height="15" fill="rgb(253,11,6)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="351.50">&lt;std::io::stdio::StdoutRaw as std..</text></g><g><title>std::io::Write::write_all (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="325" width="20.8253%" height="15" fill="rgb(247,143,39)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="335.50">std::io::Write::write_all</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="309" width="20.8253%" height="15" fill="rgb(236,97,10)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="319.50">&lt;std::sys::stdio::unix::Stdout as..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="293" width="20.8253%" height="15" fill="rgb(233,208,19)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="303.50">std::sys::pal::unix::fd::FileDesc..</text></g><g><title>__GI___libc_write (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="277" width="20.8253%" height="15" fill="rgb(216,164,2)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="287.50">__GI___libc_write</text></g><g><title>[unknown] (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="261" width="20.8253%" height="15" fill="rgb(220,129,5)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="271.50">[unknown]</text></g><g><title>[unknown] (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="245" width="20.8253%" height="15" fill="rgb(242,17,10)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="255.50">[unknown]</text></g><g><title>[unknown] (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="229" width="20.8253%" height="15" fill="rgb(242,107,0)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="239.50">[unknown]</text></g><g><title>[unknown] (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="213" width="20.8253%" height="15" fill="rgb(251,28,31)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="223.50">[unknown]</text></g><g><title>[unknown] (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="197" width="20.8253%" height="15" fill="rgb(233,223,10)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="207.50">[unknown]</text></g><g><title>[unknown] (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="181" width="20.8253%" height="15" fill="rgb(215,21,27)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="191.50">[unknown]</text></g><g><title>[unknown] (3,082,562 samples, 20.83%)</title><rect x="51.9372%" y="165" width="20.8253%" height="15" fill="rgb(232,23,21)" fg:x="7687742" fg:w="3082562"/><text x="52.1872%" y="175.50">[unknown]</text></g><g><title>[unknown] (2,552,977 samples, 17.25%)</title><rect x="55.5150%" y="149" width="17.2475%" height="15" fill="rgb(244,5,23)" fg:x="8217327" fg:w="2552977"/><text x="55.7650%" y="159.50">[unknown]</text></g><g><title>[unknown] (2,245,483 samples, 15.17%)</title><rect x="57.5924%" y="133" width="15.1701%" height="15" fill="rgb(226,81,46)" fg:x="8524821" fg:w="2245483"/><text x="57.8424%" y="143.50">[unknown]</text></g><g><title>[unknown] (1,997,112 samples, 13.49%)</title><rect x="59.2704%" y="117" width="13.4922%" height="15" fill="rgb(247,70,30)" fg:x="8773192" fg:w="1997112"/><text x="59.5204%" y="127.50">[unknown]</text></g><g><title>[unknown] (1,741,936 samples, 11.77%)</title><rect x="60.9943%" y="101" width="11.7683%" height="15" fill="rgb(212,68,19)" fg:x="9028368" fg:w="1741936"/><text x="61.2443%" y="111.50">[unknown]</text></g><g><title>[unknown] (639,299 samples, 4.32%)</title><rect x="68.4435%" y="85" width="4.3190%" height="15" fill="rgb(240,187,13)" fg:x="10131005" fg:w="639299"/><text x="68.6935%" y="95.50">[unkn..</text></g><g><title>[unknown] (236,383 samples, 1.60%)</title><rect x="71.1656%" y="69" width="1.5970%" height="15" fill="rgb(223,113,26)" fg:x="10533921" fg:w="236383"/><text x="71.4156%" y="79.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="789" width="96.6489%" height="15" fill="rgb(206,192,2)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="799.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="773" width="96.6489%" height="15" fill="rgb(241,108,4)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="783.50">__libc_start_call_main</text></g><g><title>main (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="757" width="96.6489%" height="15" fill="rgb(247,173,49)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="741" width="96.6489%" height="15" fill="rgb(224,114,35)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="751.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="725" width="96.6489%" height="15" fill="rgb(245,159,27)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="709" width="96.6489%" height="15" fill="rgb(245,172,44)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="693" width="96.6489%" height="15" fill="rgb(236,23,11)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="703.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="677" width="96.6489%" height="15" fill="rgb(205,117,38)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="687.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="661" width="96.6489%" height="15" fill="rgb(237,72,25)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="645" width="96.6489%" height="15" fill="rgb(244,70,9)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="629" width="96.6489%" height="15" fill="rgb(217,125,39)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="639.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="613" width="96.6489%" height="15" fill="rgb(235,36,10)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="623.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="597" width="96.6489%" height="15" fill="rgb(251,123,47)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="607.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="581" width="96.6489%" height="15" fill="rgb(221,13,13)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="591.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="565" width="96.6489%" height="15" fill="rgb(238,131,9)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="575.50">core::ops::function::FnOnce::call_once</text></g><g><title>dyn_dispatch_ex::main (14,305,966 samples, 96.65%)</title><rect x="0.0000%" y="549" width="96.6489%" height="15" fill="rgb(211,50,8)" fg:x="1" fg:w="14305966"/><text x="0.2500%" y="559.50">dyn_dispatch_ex::main</text></g><g><title>dyn_dispatch_ex::static_dispatch_rand_dummy (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="533" width="23.8864%" height="15" fill="rgb(245,182,24)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="543.50">dyn_dispatch_ex::static_dispatch_rand_..</text></g><g><title>&lt;dyn_dispatch_ex::Cat as dyn_dispatch_ex::Animal&gt;::speak (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="517" width="23.8864%" height="15" fill="rgb(242,14,37)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="527.50">&lt;dyn_dispatch_ex::Cat as dyn_dispatch_..</text></g><g><title>std::io::stdio::_print (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="501" width="23.8864%" height="15" fill="rgb(246,228,12)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="511.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="485" width="23.8864%" height="15" fill="rgb(213,55,15)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="495.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="469" width="23.8864%" height="15" fill="rgb(209,9,3)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="479.50">&lt;std::io::stdio::Stdout as std::io::Wr..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="453" width="23.8864%" height="15" fill="rgb(230,59,30)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="463.50">&lt;&amp;std::io::stdio::Stdout as std::io::W..</text></g><g><title>std::io::Write::write_fmt (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="437" width="23.8864%" height="15" fill="rgb(209,121,21)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="447.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="421" width="23.8864%" height="15" fill="rgb(220,109,13)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="431.50">core::fmt::write</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="405" width="23.8864%" height="15" fill="rgb(232,18,1)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="415.50">&lt;std::io::Write::write_fmt::Adapter&lt;T&gt;..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="389" width="23.8864%" height="15" fill="rgb(215,41,42)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="399.50">&lt;std::io::stdio::StdoutLock as std::io..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="373" width="23.8864%" height="15" fill="rgb(224,123,36)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="383.50">&lt;std::io::buffered::linewriter::LineWr..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="357" width="23.8864%" height="15" fill="rgb(240,125,3)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="367.50">&lt;std::io::buffered::linewritershim::Li..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="341" width="23.8864%" height="15" fill="rgb(205,98,50)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="351.50">&lt;std::io::stdio::StdoutRaw as std::io:..</text></g><g><title>std::io::Write::write_all (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="325" width="23.8864%" height="15" fill="rgb(205,185,37)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="335.50">std::io::Write::write_all</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="309" width="23.8864%" height="15" fill="rgb(238,207,15)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="319.50">&lt;std::sys::stdio::unix::Stdout as std:..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="293" width="23.8864%" height="15" fill="rgb(213,199,42)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="303.50">std::sys::pal::unix::fd::FileDesc::wri..</text></g><g><title>__GI___libc_write (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="277" width="23.8864%" height="15" fill="rgb(235,201,11)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="287.50">__GI___libc_write</text></g><g><title>[unknown] (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="261" width="23.8864%" height="15" fill="rgb(207,46,11)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="271.50">[unknown]</text></g><g><title>[unknown] (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="245" width="23.8864%" height="15" fill="rgb(241,35,35)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="255.50">[unknown]</text></g><g><title>[unknown] (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="229" width="23.8864%" height="15" fill="rgb(243,32,47)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="239.50">[unknown]</text></g><g><title>[unknown] (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="213" width="23.8864%" height="15" fill="rgb(247,202,23)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="223.50">[unknown]</text></g><g><title>[unknown] (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="197" width="23.8864%" height="15" fill="rgb(219,102,11)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="207.50">[unknown]</text></g><g><title>[unknown] (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="181" width="23.8864%" height="15" fill="rgb(243,110,44)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="191.50">[unknown]</text></g><g><title>[unknown] (3,535,663 samples, 23.89%)</title><rect x="72.7625%" y="165" width="23.8864%" height="15" fill="rgb(222,74,54)" fg:x="10770304" fg:w="3535663"/><text x="73.0125%" y="175.50">[unknown]</text></g><g><title>[unknown] (3,084,492 samples, 20.84%)</title><rect x="75.8106%" y="149" width="20.8384%" height="15" fill="rgb(216,99,12)" fg:x="11221475" fg:w="3084492"/><text x="76.0606%" y="159.50">[unknown]</text></g><g><title>[unknown] (3,084,492 samples, 20.84%)</title><rect x="75.8106%" y="133" width="20.8384%" height="15" fill="rgb(226,22,26)" fg:x="11221475" fg:w="3084492"/><text x="76.0606%" y="143.50">[unknown]</text></g><g><title>[unknown] (2,856,126 samples, 19.30%)</title><rect x="77.3534%" y="117" width="19.2956%" height="15" fill="rgb(217,163,10)" fg:x="11449841" fg:w="2856126"/><text x="77.6034%" y="127.50">[unknown]</text></g><g><title>[unknown] (2,634,285 samples, 17.80%)</title><rect x="78.8521%" y="101" width="17.7968%" height="15" fill="rgb(213,25,53)" fg:x="11671682" fg:w="2634285"/><text x="79.1021%" y="111.50">[unknown]</text></g><g><title>[unknown] (1,278,442 samples, 8.64%)</title><rect x="88.0120%" y="85" width="8.6370%" height="15" fill="rgb(252,105,26)" fg:x="13027525" fg:w="1278442"/><text x="88.2620%" y="95.50">[unknown]</text></g><g><title>[unknown] (852,495 samples, 5.76%)</title><rect x="90.8896%" y="69" width="5.7593%" height="15" fill="rgb(220,39,43)" fg:x="13453472" fg:w="852495"/><text x="91.1396%" y="79.50">[unknow..</text></g><g><title>[unknown] (636,395 samples, 4.30%)</title><rect x="92.3495%" y="53" width="4.2994%" height="15" fill="rgb(229,68,48)" fg:x="13669572" fg:w="636395"/><text x="92.5995%" y="63.50">[unkn..</text></g><g><title>[unknown] (636,395 samples, 4.30%)</title><rect x="92.3495%" y="37" width="4.2994%" height="15" fill="rgb(252,8,32)" fg:x="13669572" fg:w="636395"/><text x="92.5995%" y="47.50">[unkn..</text></g><g><title>[unknown] (2,489 samples, 0.02%)</title><rect x="96.6489%" y="773" width="0.0168%" height="15" fill="rgb(223,20,43)" fg:x="14305967" fg:w="2489"/><text x="96.8989%" y="783.50"></text></g><g><title>[unknown] (2,489 samples, 0.02%)</title><rect x="96.6489%" y="757" width="0.0168%" height="15" fill="rgb(229,81,49)" fg:x="14305967" fg:w="2489"/><text x="96.8989%" y="767.50"></text></g><g><title>[unknown] (2,489 samples, 0.02%)</title><rect x="96.6489%" y="741" width="0.0168%" height="15" fill="rgb(236,28,36)" fg:x="14305967" fg:w="2489"/><text x="96.8989%" y="751.50"></text></g><g><title>[unknown] (2,489 samples, 0.02%)</title><rect x="96.6489%" y="725" width="0.0168%" height="15" fill="rgb(249,185,26)" fg:x="14305967" fg:w="2489"/><text x="96.8989%" y="735.50"></text></g><g><title>[unknown] (2,489 samples, 0.02%)</title><rect x="96.6489%" y="709" width="0.0168%" height="15" fill="rgb(249,174,33)" fg:x="14305967" fg:w="2489"/><text x="96.8989%" y="719.50"></text></g><g><title>[unknown] (2,489 samples, 0.02%)</title><rect x="96.6489%" y="693" width="0.0168%" height="15" fill="rgb(233,201,37)" fg:x="14305967" fg:w="2489"/><text x="96.8989%" y="703.50"></text></g><g><title>[unknown] (2,489 samples, 0.02%)</title><rect x="96.6489%" y="677" width="0.0168%" height="15" fill="rgb(221,78,26)" fg:x="14305967" fg:w="2489"/><text x="96.8989%" y="687.50"></text></g><g><title>__GI___tunables_init (39,653 samples, 0.27%)</title><rect x="96.6658%" y="757" width="0.2679%" height="15" fill="rgb(250,127,30)" fg:x="14308456" fg:w="39653"/><text x="96.9158%" y="767.50"></text></g><g><title>all (14,801,991 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="14801991"/><text x="0.2500%" y="847.50"></text></g><g><title>dyn-dispatch-ex (14,801,991 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="14801991"/><text x="0.2500%" y="831.50">dyn-dispatch-ex</text></g><g><title>_start (14,801,991 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="14801991"/><text x="0.2500%" y="815.50">_start</text></g><g><title>_dl_start (496,024 samples, 3.35%)</title><rect x="96.6489%" y="789" width="3.3511%" height="15" fill="rgb(215,43,3)" fg:x="14305967" fg:w="496024"/><text x="96.8989%" y="799.50">_dl..</text></g><g><title>_dl_sysdep_start (493,535 samples, 3.33%)</title><rect x="96.6658%" y="773" width="3.3342%" height="15" fill="rgb(238,154,13)" fg:x="14308456" fg:w="493535"/><text x="96.9158%" y="783.50">_dl..</text></g><g><title>init_cpu_features.constprop.0 (453,882 samples, 3.07%)</title><rect x="96.9336%" y="757" width="3.0664%" height="15" fill="rgb(219,56,2)" fg:x="14348109" fg:w="453882"/><text x="97.1836%" y="767.50">ini..</text></g><g><title>update_active.constprop.0 (453,882 samples, 3.07%)</title><rect x="96.9336%" y="741" width="3.0664%" height="15" fill="rgb(233,0,4)" fg:x="14348109" fg:w="453882"/><text x="97.1836%" y="751.50">upd..</text></g></svg></svg>