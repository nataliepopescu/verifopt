<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="885.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="885.00"> </text><svg id="frames" x="10" width="1180" total_samples="148362125"><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (16,188,383 samples, 10.91%)</title><rect x="0.0000%" y="357" width="10.9114%" height="15" fill="rgb(227,0,7)" fg:x="11" fg:w="16188383"/><text x="0.2500%" y="367.50">&lt;std::io::stdio:..</text></g><g><title>std::io::Write::write_all (16,188,383 samples, 10.91%)</title><rect x="0.0000%" y="341" width="10.9114%" height="15" fill="rgb(217,0,24)" fg:x="11" fg:w="16188383"/><text x="0.2500%" y="351.50">std::io::Write::..</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (16,188,383 samples, 10.91%)</title><rect x="0.0000%" y="325" width="10.9114%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="16188383"/><text x="0.2500%" y="335.50">&lt;std::sys::stdio..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (16,188,383 samples, 10.91%)</title><rect x="0.0000%" y="309" width="10.9114%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="16188383"/><text x="0.2500%" y="319.50">std::sys::pal::u..</text></g><g><title>__GI___libc_write (16,188,383 samples, 10.91%)</title><rect x="0.0000%" y="293" width="10.9114%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="16188383"/><text x="0.2500%" y="303.50">__GI___libc_write</text></g><g><title>[unknown] (16,188,383 samples, 10.91%)</title><rect x="0.0000%" y="277" width="10.9114%" height="15" fill="rgb(232,128,0)" fg:x="11" fg:w="16188383"/><text x="0.2500%" y="287.50">[unknown]</text></g><g><title>[unknown] (16,188,383 samples, 10.91%)</title><rect x="0.0000%" y="261" width="10.9114%" height="15" fill="rgb(207,160,47)" fg:x="11" fg:w="16188383"/><text x="0.2500%" y="271.50">[unknown]</text></g><g><title>[unknown] (16,188,383 samples, 10.91%)</title><rect x="0.0000%" y="245" width="10.9114%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="16188383"/><text x="0.2500%" y="255.50">[unknown]</text></g><g><title>[unknown] (16,188,383 samples, 10.91%)</title><rect x="0.0000%" y="229" width="10.9114%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="16188383"/><text x="0.2500%" y="239.50">[unknown]</text></g><g><title>[unknown] (16,188,383 samples, 10.91%)</title><rect x="0.0000%" y="213" width="10.9114%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="16188383"/><text x="0.2500%" y="223.50">[unknown]</text></g><g><title>[unknown] (16,185,966 samples, 10.91%)</title><rect x="0.0016%" y="197" width="10.9098%" height="15" fill="rgb(250,228,42)" fg:x="2428" fg:w="16185966"/><text x="0.2516%" y="207.50">[unknown]</text></g><g><title>[unknown] (14,703,553 samples, 9.91%)</title><rect x="1.0008%" y="181" width="9.9106%" height="15" fill="rgb(240,193,28)" fg:x="1484841" fg:w="14703553"/><text x="1.2508%" y="191.50">[unknown]</text></g><g><title>[unknown] (14,293,630 samples, 9.63%)</title><rect x="1.2771%" y="165" width="9.6343%" height="15" fill="rgb(216,20,37)" fg:x="1894764" fg:w="14293630"/><text x="1.5271%" y="175.50">[unknown]</text></g><g><title>[unknown] (13,037,252 samples, 8.79%)</title><rect x="2.1240%" y="149" width="8.7875%" height="15" fill="rgb(206,188,39)" fg:x="3151142" fg:w="13037252"/><text x="2.3740%" y="159.50">[unknown]</text></g><g><title>[unknown] (11,469,551 samples, 7.73%)</title><rect x="3.1806%" y="133" width="7.7308%" height="15" fill="rgb(217,207,13)" fg:x="4718843" fg:w="11469551"/><text x="3.4306%" y="143.50">[unknown]</text></g><g><title>[unknown] (8,266,017 samples, 5.57%)</title><rect x="5.3399%" y="117" width="5.5715%" height="15" fill="rgb(231,73,38)" fg:x="7922377" fg:w="8266017"/><text x="5.5899%" y="127.50">[unknow..</text></g><g><title>[unknown] (3,699,189 samples, 2.49%)</title><rect x="8.4181%" y="101" width="2.4934%" height="15" fill="rgb(225,20,46)" fg:x="12489205" fg:w="3699189"/><text x="8.6681%" y="111.50">[u..</text></g><g><title>[unknown] (1,291,665 samples, 0.87%)</title><rect x="10.0408%" y="85" width="0.8706%" height="15" fill="rgb(210,31,41)" fg:x="14896729" fg:w="1291665"/><text x="10.2908%" y="95.50"></text></g><g><title>[unknown] (1,078,392 samples, 0.73%)</title><rect x="10.1845%" y="69" width="0.7269%" height="15" fill="rgb(221,200,47)" fg:x="15110002" fg:w="1078392"/><text x="10.4345%" y="79.50"></text></g><g><title>[unknown] (1,078,392 samples, 0.73%)</title><rect x="10.1845%" y="53" width="0.7269%" height="15" fill="rgb(226,26,5)" fg:x="15110002" fg:w="1078392"/><text x="10.4345%" y="63.50"></text></g><g><title>[unknown] (640,172 samples, 0.43%)</title><rect x="10.4799%" y="37" width="0.4315%" height="15" fill="rgb(249,33,26)" fg:x="15548222" fg:w="640172"/><text x="10.7299%" y="47.50"></text></g><g><title>&lt;dp_ex::Bird as dp_ex::Animal&gt;::speak (16,188,543 samples, 10.91%)</title><rect x="0.0000%" y="533" width="10.9115%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="16188543"/><text x="0.2500%" y="543.50">&lt;dp_ex::Bird as ..</text></g><g><title>std::io::stdio::_print (16,188,533 samples, 10.91%)</title><rect x="0.0000%" y="517" width="10.9115%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="16188533"/><text x="0.2500%" y="527.50">std::io::stdio::..</text></g><g><title>std::io::stdio::print_to (16,188,533 samples, 10.91%)</title><rect x="0.0000%" y="501" width="10.9115%" height="15" fill="rgb(247,18,42)" fg:x="11" fg:w="16188533"/><text x="0.2500%" y="511.50">std::io::stdio::..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (16,188,533 samples, 10.91%)</title><rect x="0.0000%" y="485" width="10.9115%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="16188533"/><text x="0.2500%" y="495.50">&lt;std::io::stdio:..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (16,188,533 samples, 10.91%)</title><rect x="0.0000%" y="469" width="10.9115%" height="15" fill="rgb(249,31,29)" fg:x="11" fg:w="16188533"/><text x="0.2500%" y="479.50">&lt;&amp;std::io::stdio..</text></g><g><title>std::io::Write::write_fmt (16,188,533 samples, 10.91%)</title><rect x="0.0000%" y="453" width="10.9115%" height="15" fill="rgb(225,111,53)" fg:x="11" fg:w="16188533"/><text x="0.2500%" y="463.50">std::io::Write::..</text></g><g><title>core::fmt::write (16,188,533 samples, 10.91%)</title><rect x="0.0000%" y="437" width="10.9115%" height="15" fill="rgb(238,160,17)" fg:x="11" fg:w="16188533"/><text x="0.2500%" y="447.50">core::fmt::write</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (16,188,533 samples, 10.91%)</title><rect x="0.0000%" y="421" width="10.9115%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="16188533"/><text x="0.2500%" y="431.50">&lt;std::io::Write:..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (16,188,533 samples, 10.91%)</title><rect x="0.0000%" y="405" width="10.9115%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="16188533"/><text x="0.2500%" y="415.50">&lt;std::io::stdio:..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (16,188,533 samples, 10.91%)</title><rect x="0.0000%" y="389" width="10.9115%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="16188533"/><text x="0.2500%" y="399.50">&lt;std::io::buffer..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (16,188,533 samples, 10.91%)</title><rect x="0.0000%" y="373" width="10.9115%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="16188533"/><text x="0.2500%" y="383.50">&lt;std::io::buffer..</text></g><g><title>&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="533" width="8.2051%" height="15" fill="rgb(213,181,19)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="543.50">&lt;dp_ex::Cat..</text></g><g><title>std::io::stdio::_print (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="517" width="8.2051%" height="15" fill="rgb(254,191,54)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="527.50">std::io::st..</text></g><g><title>std::io::stdio::print_to (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="501" width="8.2051%" height="15" fill="rgb(241,83,37)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="511.50">std::io::st..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="485" width="8.2051%" height="15" fill="rgb(233,36,39)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="495.50">&lt;std::io::s..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="469" width="8.2051%" height="15" fill="rgb(226,3,54)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="479.50">&lt;&amp;std::io::..</text></g><g><title>std::io::Write::write_fmt (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="453" width="8.2051%" height="15" fill="rgb(245,192,40)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="463.50">std::io::Wr..</text></g><g><title>core::fmt::write (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="437" width="8.2051%" height="15" fill="rgb(238,167,29)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="447.50">core::fmt::..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="421" width="8.2051%" height="15" fill="rgb(232,182,51)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="431.50">&lt;std::io::W..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="405" width="8.2051%" height="15" fill="rgb(231,60,39)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="415.50">&lt;std::io::s..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="389" width="8.2051%" height="15" fill="rgb(208,69,12)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="399.50">&lt;std::io::b..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="373" width="8.2051%" height="15" fill="rgb(235,93,37)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="383.50">&lt;std::io::b..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="357" width="8.2051%" height="15" fill="rgb(213,116,39)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="367.50">&lt;std::io::s..</text></g><g><title>std::io::Write::write_all (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="341" width="8.2051%" height="15" fill="rgb(222,207,29)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="351.50">std::io::Wr..</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="325" width="8.2051%" height="15" fill="rgb(206,96,30)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="335.50">&lt;std::sys::..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="309" width="8.2051%" height="15" fill="rgb(218,138,4)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="319.50">std::sys::p..</text></g><g><title>__GI___libc_write (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="293" width="8.2051%" height="15" fill="rgb(250,191,14)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="303.50">__GI___libc..</text></g><g><title>[unknown] (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="277" width="8.2051%" height="15" fill="rgb(239,60,40)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="287.50">[unknown]</text></g><g><title>[unknown] (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="261" width="8.2051%" height="15" fill="rgb(206,27,48)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="271.50">[unknown]</text></g><g><title>[unknown] (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="245" width="8.2051%" height="15" fill="rgb(225,35,8)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="255.50">[unknown]</text></g><g><title>[unknown] (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="229" width="8.2051%" height="15" fill="rgb(250,213,24)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="239.50">[unknown]</text></g><g><title>[unknown] (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="213" width="8.2051%" height="15" fill="rgb(247,123,22)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="223.50">[unknown]</text></g><g><title>[unknown] (12,173,263 samples, 8.21%)</title><rect x="10.9115%" y="197" width="8.2051%" height="15" fill="rgb(231,138,38)" fg:x="16188544" fg:w="12173263"/><text x="11.1615%" y="207.50">[unknown]</text></g><g><title>[unknown] (11,469,163 samples, 7.73%)</title><rect x="11.3861%" y="181" width="7.7305%" height="15" fill="rgb(231,145,46)" fg:x="16892644" fg:w="11469163"/><text x="11.6361%" y="191.50">[unknown]</text></g><g><title>[unknown] (9,719,687 samples, 6.55%)</title><rect x="12.5653%" y="165" width="6.5513%" height="15" fill="rgb(251,118,11)" fg:x="18642120" fg:w="9719687"/><text x="12.8153%" y="175.50">[unknown]</text></g><g><title>[unknown] (9,284,009 samples, 6.26%)</title><rect x="12.8589%" y="149" width="6.2577%" height="15" fill="rgb(217,147,25)" fg:x="19077798" fg:w="9284009"/><text x="13.1089%" y="159.50">[unknown]</text></g><g><title>[unknown] (8,872,759 samples, 5.98%)</title><rect x="13.1361%" y="133" width="5.9805%" height="15" fill="rgb(247,81,37)" fg:x="19489048" fg:w="8872759"/><text x="13.3861%" y="143.50">[unknown]</text></g><g><title>[unknown] (7,120,751 samples, 4.80%)</title><rect x="14.3170%" y="117" width="4.7996%" height="15" fill="rgb(209,12,38)" fg:x="21241056" fg:w="7120751"/><text x="14.5670%" y="127.50">[unkno..</text></g><g><title>[unknown] (5,412,145 samples, 3.65%)</title><rect x="15.4687%" y="101" width="3.6479%" height="15" fill="rgb(227,1,9)" fg:x="22949662" fg:w="5412145"/><text x="15.7187%" y="111.50">[unk..</text></g><g><title>[unknown] (2,452,332 samples, 1.65%)</title><rect x="17.4637%" y="85" width="1.6529%" height="15" fill="rgb(248,47,43)" fg:x="25909475" fg:w="2452332"/><text x="17.7137%" y="95.50"></text></g><g><title>[unknown] (623,898 samples, 0.42%)</title><rect x="18.6961%" y="69" width="0.4205%" height="15" fill="rgb(221,10,30)" fg:x="27737909" fg:w="623898"/><text x="18.9461%" y="79.50"></text></g><g><title>[unknown] (415,344 samples, 0.28%)</title><rect x="18.8367%" y="53" width="0.2800%" height="15" fill="rgb(210,229,1)" fg:x="27946463" fg:w="415344"/><text x="19.0867%" y="63.50"></text></g><g><title>__GI___libc_write (13,125,683 samples, 8.85%)</title><rect x="19.1166%" y="293" width="8.8471%" height="15" fill="rgb(222,148,37)" fg:x="28361808" fg:w="13125683"/><text x="19.3666%" y="303.50">__GI___libc_..</text></g><g><title>[unknown] (13,125,683 samples, 8.85%)</title><rect x="19.1166%" y="277" width="8.8471%" height="15" fill="rgb(234,67,33)" fg:x="28361808" fg:w="13125683"/><text x="19.3666%" y="287.50">[unknown]</text></g><g><title>[unknown] (13,125,683 samples, 8.85%)</title><rect x="19.1166%" y="261" width="8.8471%" height="15" fill="rgb(247,98,35)" fg:x="28361808" fg:w="13125683"/><text x="19.3666%" y="271.50">[unknown]</text></g><g><title>[unknown] (13,125,683 samples, 8.85%)</title><rect x="19.1166%" y="245" width="8.8471%" height="15" fill="rgb(247,138,52)" fg:x="28361808" fg:w="13125683"/><text x="19.3666%" y="255.50">[unknown]</text></g><g><title>[unknown] (13,125,683 samples, 8.85%)</title><rect x="19.1166%" y="229" width="8.8471%" height="15" fill="rgb(213,79,30)" fg:x="28361808" fg:w="13125683"/><text x="19.3666%" y="239.50">[unknown]</text></g><g><title>[unknown] (13,125,683 samples, 8.85%)</title><rect x="19.1166%" y="213" width="8.8471%" height="15" fill="rgb(246,177,23)" fg:x="28361808" fg:w="13125683"/><text x="19.3666%" y="223.50">[unknown]</text></g><g><title>[unknown] (13,125,683 samples, 8.85%)</title><rect x="19.1166%" y="197" width="8.8471%" height="15" fill="rgb(230,62,27)" fg:x="28361808" fg:w="13125683"/><text x="19.3666%" y="207.50">[unknown]</text></g><g><title>[unknown] (11,560,546 samples, 7.79%)</title><rect x="20.1716%" y="181" width="7.7921%" height="15" fill="rgb(216,154,8)" fg:x="29926945" fg:w="11560546"/><text x="20.4216%" y="191.50">[unknown]</text></g><g><title>[unknown] (6,545,650 samples, 4.41%)</title><rect x="23.5517%" y="165" width="4.4119%" height="15" fill="rgb(244,35,45)" fg:x="34941841" fg:w="6545650"/><text x="23.8017%" y="175.50">[unkn..</text></g><g><title>[unknown] (5,891,631 samples, 3.97%)</title><rect x="23.9926%" y="149" width="3.9711%" height="15" fill="rgb(251,115,12)" fg:x="35595860" fg:w="5891631"/><text x="24.2426%" y="159.50">[unk..</text></g><g><title>[unknown] (5,007,840 samples, 3.38%)</title><rect x="24.5883%" y="133" width="3.3754%" height="15" fill="rgb(240,54,50)" fg:x="36479651" fg:w="5007840"/><text x="24.8383%" y="143.50">[un..</text></g><g><title>[unknown] (4,327,101 samples, 2.92%)</title><rect x="25.0471%" y="117" width="2.9166%" height="15" fill="rgb(233,84,52)" fg:x="37160390" fg:w="4327101"/><text x="25.2971%" y="127.50">[u..</text></g><g><title>[unknown] (2,422,101 samples, 1.63%)</title><rect x="26.3311%" y="101" width="1.6326%" height="15" fill="rgb(207,117,47)" fg:x="39065390" fg:w="2422101"/><text x="26.5811%" y="111.50"></text></g><g><title>[unknown] (870,915 samples, 0.59%)</title><rect x="27.3766%" y="85" width="0.5870%" height="15" fill="rgb(249,43,39)" fg:x="40616576" fg:w="870915"/><text x="27.6266%" y="95.50"></text></g><g><title>[unknown] (441,798 samples, 0.30%)</title><rect x="27.6659%" y="69" width="0.2978%" height="15" fill="rgb(209,38,44)" fg:x="41045693" fg:w="441798"/><text x="27.9159%" y="79.50"></text></g><g><title>[unknown] (232,477 samples, 0.16%)</title><rect x="27.8070%" y="53" width="0.1567%" height="15" fill="rgb(236,212,23)" fg:x="41255014" fg:w="232477"/><text x="28.0570%" y="63.50"></text></g><g><title>[unknown] (232,477 samples, 0.16%)</title><rect x="27.8070%" y="37" width="0.1567%" height="15" fill="rgb(242,79,21)" fg:x="41255014" fg:w="232477"/><text x="28.0570%" y="47.50"></text></g><g><title>dp_ex::dyn_dp (41,487,491 samples, 27.96%)</title><rect x="0.0000%" y="549" width="27.9637%" height="15" fill="rgb(211,96,35)" fg:x="1" fg:w="41487491"/><text x="0.2500%" y="559.50">dp_ex::dyn_dp</text></g><g><title>&lt;dp_ex::Dog as dp_ex::Animal&gt;::speak (13,125,685 samples, 8.85%)</title><rect x="19.1166%" y="533" width="8.8471%" height="15" fill="rgb(253,215,40)" fg:x="28361807" fg:w="13125685"/><text x="19.3666%" y="543.50">&lt;dp_ex::Dog ..</text></g><g><title>std::io::stdio::_print (13,125,685 samples, 8.85%)</title><rect x="19.1166%" y="517" width="8.8471%" height="15" fill="rgb(211,81,21)" fg:x="28361807" fg:w="13125685"/><text x="19.3666%" y="527.50">std::io::std..</text></g><g><title>std::io::stdio::print_to (13,125,685 samples, 8.85%)</title><rect x="19.1166%" y="501" width="8.8471%" height="15" fill="rgb(208,190,38)" fg:x="28361807" fg:w="13125685"/><text x="19.3666%" y="511.50">std::io::std..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (13,125,685 samples, 8.85%)</title><rect x="19.1166%" y="485" width="8.8471%" height="15" fill="rgb(235,213,38)" fg:x="28361807" fg:w="13125685"/><text x="19.3666%" y="495.50">&lt;std::io::st..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (13,125,685 samples, 8.85%)</title><rect x="19.1166%" y="469" width="8.8471%" height="15" fill="rgb(237,122,38)" fg:x="28361807" fg:w="13125685"/><text x="19.3666%" y="479.50">&lt;&amp;std::io::s..</text></g><g><title>std::io::Write::write_fmt (13,125,685 samples, 8.85%)</title><rect x="19.1166%" y="453" width="8.8471%" height="15" fill="rgb(244,218,35)" fg:x="28361807" fg:w="13125685"/><text x="19.3666%" y="463.50">std::io::Wri..</text></g><g><title>core::fmt::write (13,125,685 samples, 8.85%)</title><rect x="19.1166%" y="437" width="8.8471%" height="15" fill="rgb(240,68,47)" fg:x="28361807" fg:w="13125685"/><text x="19.3666%" y="447.50">core::fmt::w..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (13,125,684 samples, 8.85%)</title><rect x="19.1166%" y="421" width="8.8471%" height="15" fill="rgb(210,16,53)" fg:x="28361808" fg:w="13125684"/><text x="19.3666%" y="431.50">&lt;std::io::Wr..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (13,125,684 samples, 8.85%)</title><rect x="19.1166%" y="405" width="8.8471%" height="15" fill="rgb(235,124,12)" fg:x="28361808" fg:w="13125684"/><text x="19.3666%" y="415.50">&lt;std::io::st..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (13,125,684 samples, 8.85%)</title><rect x="19.1166%" y="389" width="8.8471%" height="15" fill="rgb(224,169,11)" fg:x="28361808" fg:w="13125684"/><text x="19.3666%" y="399.50">&lt;std::io::bu..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (13,125,684 samples, 8.85%)</title><rect x="19.1166%" y="373" width="8.8471%" height="15" fill="rgb(250,166,2)" fg:x="28361808" fg:w="13125684"/><text x="19.3666%" y="383.50">&lt;std::io::bu..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (13,125,684 samples, 8.85%)</title><rect x="19.1166%" y="357" width="8.8471%" height="15" fill="rgb(242,216,29)" fg:x="28361808" fg:w="13125684"/><text x="19.3666%" y="367.50">&lt;std::io::st..</text></g><g><title>std::io::Write::write_all (13,125,684 samples, 8.85%)</title><rect x="19.1166%" y="341" width="8.8471%" height="15" fill="rgb(230,116,27)" fg:x="28361808" fg:w="13125684"/><text x="19.3666%" y="351.50">std::io::Wri..</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (13,125,684 samples, 8.85%)</title><rect x="19.1166%" y="325" width="8.8471%" height="15" fill="rgb(228,99,48)" fg:x="28361808" fg:w="13125684"/><text x="19.3666%" y="335.50">&lt;std::sys::s..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (13,125,684 samples, 8.85%)</title><rect x="19.1166%" y="309" width="8.8471%" height="15" fill="rgb(253,11,6)" fg:x="28361808" fg:w="13125684"/><text x="19.3666%" y="319.50">std::sys::pa..</text></g><g><title>dp_ex::static_dp (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="549" width="22.7930%" height="15" fill="rgb(247,143,39)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="559.50">dp_ex::static_dp</text></g><g><title>&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="533" width="22.7930%" height="15" fill="rgb(236,97,10)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="543.50">&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak</text></g><g><title>std::io::stdio::_print (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="517" width="22.7930%" height="15" fill="rgb(233,208,19)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="527.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="501" width="22.7930%" height="15" fill="rgb(216,164,2)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="511.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="485" width="22.7930%" height="15" fill="rgb(220,129,5)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="495.50">&lt;std::io::stdio::Stdout as std::io::..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="469" width="22.7930%" height="15" fill="rgb(242,17,10)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="479.50">&lt;&amp;std::io::stdio::Stdout as std::io:..</text></g><g><title>std::io::Write::write_fmt (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="453" width="22.7930%" height="15" fill="rgb(242,107,0)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="463.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="437" width="22.7930%" height="15" fill="rgb(251,28,31)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="447.50">core::fmt::write</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="421" width="22.7930%" height="15" fill="rgb(233,223,10)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="431.50">&lt;std::io::Write::write_fmt::Adapter&lt;..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="405" width="22.7930%" height="15" fill="rgb(215,21,27)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="415.50">&lt;std::io::stdio::StdoutLock as std::..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="389" width="22.7930%" height="15" fill="rgb(232,23,21)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="399.50">&lt;std::io::buffered::linewriter::Line..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="373" width="22.7930%" height="15" fill="rgb(244,5,23)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="383.50">&lt;std::io::buffered::linewritershim::..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="357" width="22.7930%" height="15" fill="rgb(226,81,46)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="367.50">&lt;std::io::stdio::StdoutRaw as std::i..</text></g><g><title>std::io::Write::write_all (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="341" width="22.7930%" height="15" fill="rgb(247,70,30)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="351.50">std::io::Write::write_all</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="325" width="22.7930%" height="15" fill="rgb(212,68,19)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="335.50">&lt;std::sys::stdio::unix::Stdout as st..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="309" width="22.7930%" height="15" fill="rgb(240,187,13)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="319.50">std::sys::pal::unix::fd::FileDesc::w..</text></g><g><title>__GI___libc_write (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="293" width="22.7930%" height="15" fill="rgb(223,113,26)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="303.50">__GI___libc_write</text></g><g><title>[unknown] (33,816,126 samples, 22.79%)</title><rect x="27.9637%" y="277" width="22.7930%" height="15" fill="rgb(206,192,2)" fg:x="41487492" fg:w="33816126"/><text x="28.2137%" y="287.50">[unknown]</text></g><g><title>[unknown] (33,650,859 samples, 22.68%)</title><rect x="28.0751%" y="261" width="22.6816%" height="15" fill="rgb(241,108,4)" fg:x="41652759" fg:w="33650859"/><text x="28.3251%" y="271.50">[unknown]</text></g><g><title>[unknown] (33,650,859 samples, 22.68%)</title><rect x="28.0751%" y="245" width="22.6816%" height="15" fill="rgb(247,173,49)" fg:x="41652759" fg:w="33650859"/><text x="28.3251%" y="255.50">[unknown]</text></g><g><title>[unknown] (33,650,859 samples, 22.68%)</title><rect x="28.0751%" y="229" width="22.6816%" height="15" fill="rgb(224,114,35)" fg:x="41652759" fg:w="33650859"/><text x="28.3251%" y="239.50">[unknown]</text></g><g><title>[unknown] (33,650,859 samples, 22.68%)</title><rect x="28.0751%" y="213" width="22.6816%" height="15" fill="rgb(245,159,27)" fg:x="41652759" fg:w="33650859"/><text x="28.3251%" y="223.50">[unknown]</text></g><g><title>[unknown] (33,491,039 samples, 22.57%)</title><rect x="28.1828%" y="197" width="22.5738%" height="15" fill="rgb(245,172,44)" fg:x="41812579" fg:w="33491039"/><text x="28.4328%" y="207.50">[unknown]</text></g><g><title>[unknown] (31,515,628 samples, 21.24%)</title><rect x="29.5143%" y="181" width="21.2424%" height="15" fill="rgb(236,23,11)" fg:x="43787990" fg:w="31515628"/><text x="29.7643%" y="191.50">[unknown]</text></g><g><title>[unknown] (27,723,632 samples, 18.69%)</title><rect x="32.0702%" y="165" width="18.6865%" height="15" fill="rgb(205,117,38)" fg:x="47579986" fg:w="27723632"/><text x="32.3202%" y="175.50">[unknown]</text></g><g><title>[unknown] (26,066,682 samples, 17.57%)</title><rect x="33.1870%" y="149" width="17.5696%" height="15" fill="rgb(237,72,25)" fg:x="49236936" fg:w="26066682"/><text x="33.4370%" y="159.50">[unknown]</text></g><g><title>[unknown] (22,630,071 samples, 15.25%)</title><rect x="35.5034%" y="133" width="15.2533%" height="15" fill="rgb(244,70,9)" fg:x="52673547" fg:w="22630071"/><text x="35.7534%" y="143.50">[unknown]</text></g><g><title>[unknown] (18,865,928 samples, 12.72%)</title><rect x="38.0405%" y="117" width="12.7161%" height="15" fill="rgb(217,125,39)" fg:x="56437690" fg:w="18865928"/><text x="38.2905%" y="127.50">[unknown]</text></g><g><title>[unknown] (7,089,496 samples, 4.78%)</title><rect x="45.9781%" y="101" width="4.7785%" height="15" fill="rgb(235,36,10)" fg:x="68214122" fg:w="7089496"/><text x="46.2281%" y="111.50">[unkno..</text></g><g><title>[unknown] (2,472,447 samples, 1.67%)</title><rect x="49.0901%" y="85" width="1.6665%" height="15" fill="rgb(251,123,47)" fg:x="72831171" fg:w="2472447"/><text x="49.3401%" y="95.50"></text></g><g><title>[unknown] (658,672 samples, 0.44%)</title><rect x="50.3127%" y="69" width="0.4440%" height="15" fill="rgb(221,13,13)" fg:x="74644946" fg:w="658672"/><text x="50.5627%" y="79.50"></text></g><g><title>[unknown] (658,672 samples, 0.44%)</title><rect x="50.3127%" y="53" width="0.4440%" height="15" fill="rgb(238,131,9)" fg:x="74644946" fg:w="658672"/><text x="50.5627%" y="63.50"></text></g><g><title>[unknown] (159,884 samples, 0.11%)</title><rect x="50.6489%" y="37" width="0.1078%" height="15" fill="rgb(211,50,8)" fg:x="75143734" fg:w="159884"/><text x="50.8989%" y="47.50"></text></g><g><title>dp_ex::static_dp_rand (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="549" width="24.5370%" height="15" fill="rgb(245,182,24)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="559.50">dp_ex::static_dp_rand</text></g><g><title>&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="533" width="24.5370%" height="15" fill="rgb(242,14,37)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="543.50">&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak</text></g><g><title>std::io::stdio::_print (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="517" width="24.5370%" height="15" fill="rgb(246,228,12)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="527.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="501" width="24.5370%" height="15" fill="rgb(213,55,15)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="511.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="485" width="24.5370%" height="15" fill="rgb(209,9,3)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="495.50">&lt;std::io::stdio::Stdout as std::io::Wri..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="469" width="24.5370%" height="15" fill="rgb(230,59,30)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="479.50">&lt;&amp;std::io::stdio::Stdout as std::io::Wr..</text></g><g><title>std::io::Write::write_fmt (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="453" width="24.5370%" height="15" fill="rgb(209,121,21)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="463.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="437" width="24.5370%" height="15" fill="rgb(220,109,13)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="447.50">core::fmt::write</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="421" width="24.5370%" height="15" fill="rgb(232,18,1)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="431.50">&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; ..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="405" width="24.5370%" height="15" fill="rgb(215,41,42)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="415.50">&lt;std::io::stdio::StdoutLock as std::io:..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="389" width="24.5370%" height="15" fill="rgb(224,123,36)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="399.50">&lt;std::io::buffered::linewriter::LineWri..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="373" width="24.5370%" height="15" fill="rgb(240,125,3)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="383.50">&lt;std::io::buffered::linewritershim::Lin..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="357" width="24.5370%" height="15" fill="rgb(205,98,50)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="367.50">&lt;std::io::stdio::StdoutRaw as std::io::..</text></g><g><title>std::io::Write::write_all (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="341" width="24.5370%" height="15" fill="rgb(205,185,37)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="351.50">std::io::Write::write_all</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="325" width="24.5370%" height="15" fill="rgb(238,207,15)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="335.50">&lt;std::sys::stdio::unix::Stdout as std::..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="309" width="24.5370%" height="15" fill="rgb(213,199,42)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="319.50">std::sys::pal::unix::fd::FileDesc::write</text></g><g><title>__GI___libc_write (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="293" width="24.5370%" height="15" fill="rgb(235,201,11)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="303.50">__GI___libc_write</text></g><g><title>[unknown] (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="277" width="24.5370%" height="15" fill="rgb(207,46,11)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="287.50">[unknown]</text></g><g><title>[unknown] (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="261" width="24.5370%" height="15" fill="rgb(241,35,35)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="271.50">[unknown]</text></g><g><title>[unknown] (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="245" width="24.5370%" height="15" fill="rgb(243,32,47)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="255.50">[unknown]</text></g><g><title>[unknown] (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="229" width="24.5370%" height="15" fill="rgb(247,202,23)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="239.50">[unknown]</text></g><g><title>[unknown] (36,403,562 samples, 24.54%)</title><rect x="50.7566%" y="213" width="24.5370%" height="15" fill="rgb(219,102,11)" fg:x="75303618" fg:w="36403562"/><text x="51.0066%" y="223.50">[unknown]</text></g><g><title>[unknown] (35,758,048 samples, 24.10%)</title><rect x="51.1917%" y="197" width="24.1019%" height="15" fill="rgb(243,110,44)" fg:x="75949132" fg:w="35758048"/><text x="51.4417%" y="207.50">[unknown]</text></g><g><title>[unknown] (31,578,314 samples, 21.28%)</title><rect x="54.0090%" y="181" width="21.2846%" height="15" fill="rgb(222,74,54)" fg:x="80128866" fg:w="31578314"/><text x="54.2590%" y="191.50">[unknown]</text></g><g><title>[unknown] (27,467,806 samples, 18.51%)</title><rect x="56.7796%" y="165" width="18.5140%" height="15" fill="rgb(216,99,12)" fg:x="84239374" fg:w="27467806"/><text x="57.0296%" y="175.50">[unknown]</text></g><g><title>[unknown] (24,649,893 samples, 16.61%)</title><rect x="58.6789%" y="149" width="16.6147%" height="15" fill="rgb(226,22,26)" fg:x="87057287" fg:w="24649893"/><text x="58.9289%" y="159.50">[unknown]</text></g><g><title>[unknown] (22,910,004 samples, 15.44%)</title><rect x="59.8516%" y="133" width="15.4419%" height="15" fill="rgb(217,163,10)" fg:x="88797176" fg:w="22910004"/><text x="60.1016%" y="143.50">[unknown]</text></g><g><title>[unknown] (17,068,192 samples, 11.50%)</title><rect x="63.7892%" y="117" width="11.5044%" height="15" fill="rgb(213,25,53)" fg:x="94638988" fg:w="17068192"/><text x="64.0392%" y="127.50">[unknown]</text></g><g><title>[unknown] (10,062,994 samples, 6.78%)</title><rect x="68.5109%" y="101" width="6.7827%" height="15" fill="rgb(252,105,26)" fg:x="101644186" fg:w="10062994"/><text x="68.7609%" y="111.50">[unknown]</text></g><g><title>[unknown] (5,085,910 samples, 3.43%)</title><rect x="71.8656%" y="85" width="3.4280%" height="15" fill="rgb(220,39,43)" fg:x="106621270" fg:w="5085910"/><text x="72.1156%" y="95.50">[un..</text></g><g><title>[unknown] (3,203,212 samples, 2.16%)</title><rect x="73.1345%" y="69" width="2.1590%" height="15" fill="rgb(229,68,48)" fg:x="108503968" fg:w="3203212"/><text x="73.3845%" y="79.50">[..</text></g><g><title>[unknown] (2,972,232 samples, 2.00%)</title><rect x="73.2902%" y="53" width="2.0034%" height="15" fill="rgb(252,8,32)" fg:x="108734948" fg:w="2972232"/><text x="73.5402%" y="63.50">[..</text></g><g><title>[unknown] (797,742 samples, 0.54%)</title><rect x="74.7559%" y="37" width="0.5377%" height="15" fill="rgb(223,20,43)" fg:x="110909438" fg:w="797742"/><text x="75.0059%" y="47.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="805" width="99.3715%" height="15" fill="rgb(229,81,49)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="815.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="789" width="99.3715%" height="15" fill="rgb(236,28,36)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="799.50">__libc_start_call_main</text></g><g><title>main (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="773" width="99.3715%" height="15" fill="rgb(249,185,26)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="783.50">main</text></g><g><title>std::rt::lang_start_internal (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="757" width="99.3715%" height="15" fill="rgb(249,174,33)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="767.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="741" width="99.3715%" height="15" fill="rgb(233,201,37)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="725" width="99.3715%" height="15" fill="rgb(221,78,26)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="709" width="99.3715%" height="15" fill="rgb(250,127,30)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="719.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="693" width="99.3715%" height="15" fill="rgb(230,49,44)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="703.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="677" width="99.3715%" height="15" fill="rgb(229,67,23)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="661" width="99.3715%" height="15" fill="rgb(249,83,47)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="645" width="99.3715%" height="15" fill="rgb(215,43,3)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="655.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="629" width="99.3715%" height="15" fill="rgb(238,154,13)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="639.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="613" width="99.3715%" height="15" fill="rgb(219,56,2)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="623.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="597" width="99.3715%" height="15" fill="rgb(233,0,4)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="607.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="581" width="99.3715%" height="15" fill="rgb(235,30,7)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>dp_ex::main (147,429,612 samples, 99.37%)</title><rect x="0.0000%" y="565" width="99.3715%" height="15" fill="rgb(250,79,13)" fg:x="1" fg:w="147429612"/><text x="0.2500%" y="575.50">dp_ex::main</text></g><g><title>dp_ex::static_dp_rand_dummy (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="549" width="24.0779%" height="15" fill="rgb(211,146,34)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="559.50">dp_ex::static_dp_rand_dummy</text></g><g><title>&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="533" width="24.0779%" height="15" fill="rgb(228,22,38)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="543.50">&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak</text></g><g><title>std::io::stdio::_print (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="517" width="24.0779%" height="15" fill="rgb(235,168,5)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="527.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="501" width="24.0779%" height="15" fill="rgb(221,155,16)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="511.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="485" width="24.0779%" height="15" fill="rgb(215,215,53)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="495.50">&lt;std::io::stdio::Stdout as std::io::Wr..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="469" width="24.0779%" height="15" fill="rgb(223,4,10)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="479.50">&lt;&amp;std::io::stdio::Stdout as std::io::W..</text></g><g><title>std::io::Write::write_fmt (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="453" width="24.0779%" height="15" fill="rgb(234,103,6)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="463.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="437" width="24.0779%" height="15" fill="rgb(227,97,0)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="447.50">core::fmt::write</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="421" width="24.0779%" height="15" fill="rgb(234,150,53)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="431.50">&lt;std::io::Write::write_fmt::Adapter&lt;T&gt;..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="405" width="24.0779%" height="15" fill="rgb(228,201,54)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="415.50">&lt;std::io::stdio::StdoutLock as std::io..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="389" width="24.0779%" height="15" fill="rgb(222,22,37)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="399.50">&lt;std::io::buffered::linewriter::LineWr..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="373" width="24.0779%" height="15" fill="rgb(237,53,32)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="383.50">&lt;std::io::buffered::linewritershim::Li..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="357" width="24.0779%" height="15" fill="rgb(233,25,53)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="367.50">&lt;std::io::stdio::StdoutRaw as std::io:..</text></g><g><title>std::io::Write::write_all (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="341" width="24.0779%" height="15" fill="rgb(210,40,34)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="351.50">std::io::Write::write_all</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="325" width="24.0779%" height="15" fill="rgb(241,220,44)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="335.50">&lt;std::sys::stdio::unix::Stdout as std:..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="309" width="24.0779%" height="15" fill="rgb(235,28,35)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="319.50">std::sys::pal::unix::fd::FileDesc::wri..</text></g><g><title>__GI___libc_write (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="293" width="24.0779%" height="15" fill="rgb(210,56,17)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="303.50">__GI___libc_write</text></g><g><title>[unknown] (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="277" width="24.0779%" height="15" fill="rgb(224,130,29)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="287.50">[unknown]</text></g><g><title>[unknown] (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="261" width="24.0779%" height="15" fill="rgb(235,212,8)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="271.50">[unknown]</text></g><g><title>[unknown] (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="245" width="24.0779%" height="15" fill="rgb(223,33,50)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="255.50">[unknown]</text></g><g><title>[unknown] (35,722,433 samples, 24.08%)</title><rect x="75.2936%" y="229" width="24.0779%" height="15" fill="rgb(219,149,13)" fg:x="111707180" fg:w="35722433"/><text x="75.5436%" y="239.50">[unknown]</text></g><g><title>[unknown] (35,383,551 samples, 23.85%)</title><rect x="75.5220%" y="213" width="23.8495%" height="15" fill="rgb(250,156,29)" fg:x="112046062" fg:w="35383551"/><text x="75.7720%" y="223.50">[unknown]</text></g><g><title>[unknown] (35,000,152 samples, 23.59%)</title><rect x="75.7804%" y="197" width="23.5910%" height="15" fill="rgb(216,193,19)" fg:x="112429461" fg:w="35000152"/><text x="76.0304%" y="207.50">[unknown]</text></g><g><title>[unknown] (33,115,651 samples, 22.32%)</title><rect x="77.0506%" y="181" width="22.3208%" height="15" fill="rgb(216,135,14)" fg:x="114313962" fg:w="33115651"/><text x="77.3006%" y="191.50">[unknown]</text></g><g><title>[unknown] (29,457,215 samples, 19.85%)</title><rect x="79.5165%" y="165" width="19.8549%" height="15" fill="rgb(241,47,5)" fg:x="117972398" fg:w="29457215"/><text x="79.7665%" y="175.50">[unknown]</text></g><g><title>[unknown] (28,475,449 samples, 19.19%)</title><rect x="80.1783%" y="149" width="19.1932%" height="15" fill="rgb(233,42,35)" fg:x="118954164" fg:w="28475449"/><text x="80.4283%" y="159.50">[unknown]</text></g><g><title>[unknown] (25,457,932 samples, 17.16%)</title><rect x="82.2121%" y="133" width="17.1593%" height="15" fill="rgb(231,13,6)" fg:x="121971681" fg:w="25457932"/><text x="82.4621%" y="143.50">[unknown]</text></g><g><title>[unknown] (22,077,014 samples, 14.88%)</title><rect x="84.4910%" y="117" width="14.8805%" height="15" fill="rgb(207,181,40)" fg:x="125352599" fg:w="22077014"/><text x="84.7410%" y="127.50">[unknown]</text></g><g><title>[unknown] (9,555,972 samples, 6.44%)</title><rect x="92.9305%" y="101" width="6.4410%" height="15" fill="rgb(254,173,49)" fg:x="137873641" fg:w="9555972"/><text x="93.1805%" y="111.50">[unknown]</text></g><g><title>[unknown] (3,638,729 samples, 2.45%)</title><rect x="96.9189%" y="85" width="2.4526%" height="15" fill="rgb(221,1,38)" fg:x="143790884" fg:w="3638729"/><text x="97.1689%" y="95.50">[u..</text></g><g><title>[unknown] (1,428,539 samples, 0.96%)</title><rect x="98.4086%" y="69" width="0.9629%" height="15" fill="rgb(206,124,46)" fg:x="146001074" fg:w="1428539"/><text x="98.6586%" y="79.50"></text></g><g><title>[unknown] (924,939 samples, 0.62%)</title><rect x="98.7480%" y="53" width="0.6234%" height="15" fill="rgb(249,21,11)" fg:x="146504674" fg:w="924939"/><text x="98.9980%" y="63.50"></text></g><g><title>__GI___tunables_init (72,888 samples, 0.05%)</title><rect x="99.3741%" y="773" width="0.0491%" height="15" fill="rgb(222,201,40)" fg:x="147433569" fg:w="72888"/><text x="99.6241%" y="783.50"></text></g><g><title>all (148,362,125 samples, 100%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(235,61,29)" fg:x="0" fg:w="148362125"/><text x="0.2500%" y="863.50"></text></g><g><title>dp-ex (148,362,125 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="148362125"/><text x="0.2500%" y="847.50">dp-ex</text></g><g><title>_start (148,362,125 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="148362125"/><text x="0.2500%" y="831.50">_start</text></g><g><title>_dl_start (932,512 samples, 0.63%)</title><rect x="99.3715%" y="805" width="0.6285%" height="15" fill="rgb(239,76,54)" fg:x="147429613" fg:w="932512"/><text x="99.6215%" y="815.50"></text></g><g><title>_dl_sysdep_start (928,556 samples, 0.63%)</title><rect x="99.3741%" y="789" width="0.6259%" height="15" fill="rgb(231,124,27)" fg:x="147433569" fg:w="928556"/><text x="99.6241%" y="799.50"></text></g><g><title>dl_main (855,668 samples, 0.58%)</title><rect x="99.4233%" y="773" width="0.5767%" height="15" fill="rgb(249,195,6)" fg:x="147506457" fg:w="855668"/><text x="99.6733%" y="783.50"></text></g><g><title>[unknown] (855,668 samples, 0.58%)</title><rect x="99.4233%" y="757" width="0.5767%" height="15" fill="rgb(237,174,47)" fg:x="147506457" fg:w="855668"/><text x="99.6733%" y="767.50"></text></g><g><title>[unknown] (855,668 samples, 0.58%)</title><rect x="99.4233%" y="741" width="0.5767%" height="15" fill="rgb(206,201,31)" fg:x="147506457" fg:w="855668"/><text x="99.6733%" y="751.50"></text></g><g><title>[unknown] (855,668 samples, 0.58%)</title><rect x="99.4233%" y="725" width="0.5767%" height="15" fill="rgb(231,57,52)" fg:x="147506457" fg:w="855668"/><text x="99.6733%" y="735.50"></text></g><g><title>[unknown] (855,668 samples, 0.58%)</title><rect x="99.4233%" y="709" width="0.5767%" height="15" fill="rgb(248,177,22)" fg:x="147506457" fg:w="855668"/><text x="99.6733%" y="719.50"></text></g><g><title>[unknown] (855,668 samples, 0.58%)</title><rect x="99.4233%" y="693" width="0.5767%" height="15" fill="rgb(215,211,37)" fg:x="147506457" fg:w="855668"/><text x="99.6733%" y="703.50"></text></g><g><title>[unknown] (855,668 samples, 0.58%)</title><rect x="99.4233%" y="677" width="0.5767%" height="15" fill="rgb(241,128,51)" fg:x="147506457" fg:w="855668"/><text x="99.6733%" y="687.50"></text></g></svg></svg>