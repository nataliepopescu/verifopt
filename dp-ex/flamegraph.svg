<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="885.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="885.00"> </text><svg id="frames" x="10" width="1180" total_samples="151293745"><g><title>&lt;dp_ex::Bird as dp_ex::Animal&gt;::speak (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="533" width="8.7679%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="543.50">&lt;dp_ex::Bird..</text></g><g><title>std::io::stdio::_print (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="517" width="8.7679%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="527.50">std::io::std..</text></g><g><title>std::io::stdio::print_to (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="501" width="8.7679%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="511.50">std::io::std..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="485" width="8.7679%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="495.50">&lt;std::io::st..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="469" width="8.7679%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="479.50">&lt;&amp;std::io::s..</text></g><g><title>std::io::Write::write_fmt (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="453" width="8.7679%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="463.50">std::io::Wri..</text></g><g><title>core::fmt::write (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="437" width="8.7679%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="447.50">core::fmt::w..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="421" width="8.7679%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="431.50">&lt;std::io::Wr..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="405" width="8.7679%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="415.50">&lt;std::io::st..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="389" width="8.7679%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="399.50">&lt;std::io::bu..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="373" width="8.7679%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="383.50">&lt;std::io::bu..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="357" width="8.7679%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="367.50">&lt;std::io::st..</text></g><g><title>std::io::Write::write_all (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="341" width="8.7679%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="351.50">std::io::Wri..</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="325" width="8.7679%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="335.50">&lt;std::sys::s..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="309" width="8.7679%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="319.50">std::sys::pa..</text></g><g><title>__GI___libc_write (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="293" width="8.7679%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="303.50">__GI___libc_..</text></g><g><title>[unknown] (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="277" width="8.7679%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="287.50">[unknown]</text></g><g><title>[unknown] (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="261" width="8.7679%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="271.50">[unknown]</text></g><g><title>[unknown] (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="245" width="8.7679%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="255.50">[unknown]</text></g><g><title>[unknown] (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="229" width="8.7679%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="239.50">[unknown]</text></g><g><title>[unknown] (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="213" width="8.7679%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="223.50">[unknown]</text></g><g><title>[unknown] (13,265,340 samples, 8.77%)</title><rect x="0.0000%" y="197" width="8.7679%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="13265340"/><text x="0.2500%" y="207.50">[unknown]</text></g><g><title>[unknown] (11,322,933 samples, 7.48%)</title><rect x="1.2839%" y="181" width="7.4841%" height="15" fill="rgb(221,5,38)" fg:x="1942408" fg:w="11322933"/><text x="1.5339%" y="191.50">[unknown]</text></g><g><title>[unknown] (9,911,884 samples, 6.55%)</title><rect x="2.2165%" y="165" width="6.5514%" height="15" fill="rgb(247,18,42)" fg:x="3353457" fg:w="9911884"/><text x="2.4665%" y="175.50">[unknown]</text></g><g><title>[unknown] (6,957,240 samples, 4.60%)</title><rect x="4.1694%" y="149" width="4.5985%" height="15" fill="rgb(241,131,45)" fg:x="6308101" fg:w="6957240"/><text x="4.4194%" y="159.50">[unkn..</text></g><g><title>[unknown] (5,884,868 samples, 3.89%)</title><rect x="4.8782%" y="133" width="3.8897%" height="15" fill="rgb(249,31,29)" fg:x="7380473" fg:w="5884868"/><text x="5.1282%" y="143.50">[unk..</text></g><g><title>[unknown] (4,310,678 samples, 2.85%)</title><rect x="5.9187%" y="117" width="2.8492%" height="15" fill="rgb(225,111,53)" fg:x="8954663" fg:w="4310678"/><text x="6.1687%" y="127.50">[u..</text></g><g><title>[unknown] (1,099,554 samples, 0.73%)</title><rect x="8.0412%" y="101" width="0.7268%" height="15" fill="rgb(238,160,17)" fg:x="12165787" fg:w="1099554"/><text x="8.2912%" y="111.50"></text></g><g><title>[unknown] (800,186 samples, 0.53%)</title><rect x="8.2390%" y="85" width="0.5289%" height="15" fill="rgb(214,148,48)" fg:x="12465155" fg:w="800186"/><text x="8.4890%" y="95.50"></text></g><g><title>[unknown] (577,161 samples, 0.38%)</title><rect x="8.3865%" y="69" width="0.3815%" height="15" fill="rgb(232,36,49)" fg:x="12688180" fg:w="577161"/><text x="8.6365%" y="79.50"></text></g><g><title>[unknown] (281,567 samples, 0.19%)</title><rect x="8.5818%" y="53" width="0.1861%" height="15" fill="rgb(209,103,24)" fg:x="12983774" fg:w="281567"/><text x="8.8318%" y="63.50"></text></g><g><title>&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="533" width="11.2951%" height="15" fill="rgb(229,88,8)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="543.50">&lt;dp_ex::Cat as dp..</text></g><g><title>std::io::stdio::_print (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="517" width="11.2951%" height="15" fill="rgb(213,181,19)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="527.50">std::io::stdio::_..</text></g><g><title>std::io::stdio::print_to (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="501" width="11.2951%" height="15" fill="rgb(254,191,54)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="511.50">std::io::stdio::p..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="485" width="11.2951%" height="15" fill="rgb(241,83,37)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="495.50">&lt;std::io::stdio::..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="469" width="11.2951%" height="15" fill="rgb(233,36,39)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="479.50">&lt;&amp;std::io::stdio:..</text></g><g><title>std::io::Write::write_fmt (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="453" width="11.2951%" height="15" fill="rgb(226,3,54)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="463.50">std::io::Write::w..</text></g><g><title>core::fmt::write (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="437" width="11.2951%" height="15" fill="rgb(245,192,40)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="447.50">core::fmt::write</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="421" width="11.2951%" height="15" fill="rgb(238,167,29)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="431.50">&lt;std::io::Write::..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="405" width="11.2951%" height="15" fill="rgb(232,182,51)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="415.50">&lt;std::io::stdio::..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="389" width="11.2951%" height="15" fill="rgb(231,60,39)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="399.50">&lt;std::io::buffere..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="373" width="11.2951%" height="15" fill="rgb(208,69,12)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="383.50">&lt;std::io::buffere..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="357" width="11.2951%" height="15" fill="rgb(235,93,37)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="367.50">&lt;std::io::stdio::..</text></g><g><title>std::io::Write::write_all (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="341" width="11.2951%" height="15" fill="rgb(213,116,39)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="351.50">std::io::Write::w..</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="325" width="11.2951%" height="15" fill="rgb(222,207,29)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="335.50">&lt;std::sys::stdio:..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="309" width="11.2951%" height="15" fill="rgb(206,96,30)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="319.50">std::sys::pal::un..</text></g><g><title>__GI___libc_write (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="293" width="11.2951%" height="15" fill="rgb(218,138,4)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="303.50">__GI___libc_write</text></g><g><title>[unknown] (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="277" width="11.2951%" height="15" fill="rgb(250,191,14)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="287.50">[unknown]</text></g><g><title>[unknown] (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="261" width="11.2951%" height="15" fill="rgb(239,60,40)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="271.50">[unknown]</text></g><g><title>[unknown] (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="245" width="11.2951%" height="15" fill="rgb(206,27,48)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="255.50">[unknown]</text></g><g><title>[unknown] (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="229" width="11.2951%" height="15" fill="rgb(225,35,8)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="239.50">[unknown]</text></g><g><title>[unknown] (17,088,811 samples, 11.30%)</title><rect x="8.7679%" y="213" width="11.2951%" height="15" fill="rgb(250,213,24)" fg:x="13265341" fg:w="17088811"/><text x="9.0179%" y="223.50">[unknown]</text></g><g><title>[unknown] (16,449,240 samples, 10.87%)</title><rect x="9.1907%" y="197" width="10.8724%" height="15" fill="rgb(247,123,22)" fg:x="13904912" fg:w="16449240"/><text x="9.4407%" y="207.50">[unknown]</text></g><g><title>[unknown] (14,783,652 samples, 9.77%)</title><rect x="10.2916%" y="181" width="9.7715%" height="15" fill="rgb(231,138,38)" fg:x="15570500" fg:w="14783652"/><text x="10.5416%" y="191.50">[unknown]</text></g><g><title>[unknown] (10,009,427 samples, 6.62%)</title><rect x="13.4472%" y="165" width="6.6159%" height="15" fill="rgb(231,145,46)" fg:x="20344725" fg:w="10009427"/><text x="13.6972%" y="175.50">[unknown]</text></g><g><title>[unknown] (7,850,117 samples, 5.19%)</title><rect x="14.8744%" y="149" width="5.1887%" height="15" fill="rgb(251,118,11)" fg:x="22504035" fg:w="7850117"/><text x="15.1244%" y="159.50">[unkno..</text></g><g><title>[unknown] (7,105,286 samples, 4.70%)</title><rect x="15.3667%" y="133" width="4.6964%" height="15" fill="rgb(217,147,25)" fg:x="23248866" fg:w="7105286"/><text x="15.6167%" y="143.50">[unkn..</text></g><g><title>[unknown] (5,755,062 samples, 3.80%)</title><rect x="16.2592%" y="117" width="3.8039%" height="15" fill="rgb(247,81,37)" fg:x="24599090" fg:w="5755062"/><text x="16.5092%" y="127.50">[unk..</text></g><g><title>[unknown] (3,306,807 samples, 2.19%)</title><rect x="17.8774%" y="101" width="2.1857%" height="15" fill="rgb(209,12,38)" fg:x="27047345" fg:w="3306807"/><text x="18.1274%" y="111.50">[..</text></g><g><title>[unknown] (2,062,226 samples, 1.36%)</title><rect x="18.7000%" y="85" width="1.3631%" height="15" fill="rgb(227,1,9)" fg:x="28291926" fg:w="2062226"/><text x="18.9500%" y="95.50"></text></g><g><title>[unknown] (1,276,669 samples, 0.84%)</title><rect x="19.2192%" y="69" width="0.8438%" height="15" fill="rgb(248,47,43)" fg:x="29077483" fg:w="1276669"/><text x="19.4692%" y="79.50"></text></g><g><title>[unknown] (1,276,669 samples, 0.84%)</title><rect x="19.2192%" y="53" width="0.8438%" height="15" fill="rgb(221,10,30)" fg:x="29077483" fg:w="1276669"/><text x="19.4692%" y="63.50"></text></g><g><title>[unknown] (1,055,347 samples, 0.70%)</title><rect x="19.3655%" y="37" width="0.6975%" height="15" fill="rgb(210,229,1)" fg:x="29298805" fg:w="1055347"/><text x="19.6155%" y="47.50"></text></g><g><title>dp_ex::dyn_dp (45,178,499 samples, 29.86%)</title><rect x="0.0000%" y="549" width="29.8614%" height="15" fill="rgb(222,148,37)" fg:x="1" fg:w="45178499"/><text x="0.2500%" y="559.50">dp_ex::dyn_dp</text></g><g><title>&lt;dp_ex::Dog as dp_ex::Animal&gt;::speak (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="533" width="9.7984%" height="15" fill="rgb(234,67,33)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="543.50">&lt;dp_ex::Dog as..</text></g><g><title>std::io::stdio::_print (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="517" width="9.7984%" height="15" fill="rgb(247,98,35)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="527.50">std::io::stdio..</text></g><g><title>std::io::stdio::print_to (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="501" width="9.7984%" height="15" fill="rgb(247,138,52)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="511.50">std::io::stdio..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="485" width="9.7984%" height="15" fill="rgb(213,79,30)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="495.50">&lt;std::io::stdi..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="469" width="9.7984%" height="15" fill="rgb(246,177,23)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="479.50">&lt;&amp;std::io::std..</text></g><g><title>std::io::Write::write_fmt (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="453" width="9.7984%" height="15" fill="rgb(230,62,27)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="463.50">std::io::Write..</text></g><g><title>core::fmt::write (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="437" width="9.7984%" height="15" fill="rgb(216,154,8)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="447.50">core::fmt::wri..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="421" width="9.7984%" height="15" fill="rgb(244,35,45)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="431.50">&lt;std::io::Writ..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="405" width="9.7984%" height="15" fill="rgb(251,115,12)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="415.50">&lt;std::io::stdi..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="389" width="9.7984%" height="15" fill="rgb(240,54,50)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="399.50">&lt;std::io::buff..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="373" width="9.7984%" height="15" fill="rgb(233,84,52)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="383.50">&lt;std::io::buff..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="357" width="9.7984%" height="15" fill="rgb(207,117,47)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="367.50">&lt;std::io::stdi..</text></g><g><title>std::io::Write::write_all (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="341" width="9.7984%" height="15" fill="rgb(249,43,39)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="351.50">std::io::Write..</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="325" width="9.7984%" height="15" fill="rgb(209,38,44)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="335.50">&lt;std::sys::std..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="309" width="9.7984%" height="15" fill="rgb(236,212,23)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="319.50">std::sys::pal:..</text></g><g><title>__GI___libc_write (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="293" width="9.7984%" height="15" fill="rgb(242,79,21)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="303.50">__GI___libc_wr..</text></g><g><title>[unknown] (14,824,348 samples, 9.80%)</title><rect x="20.0631%" y="277" width="9.7984%" height="15" fill="rgb(211,96,35)" fg:x="30354152" fg:w="14824348"/><text x="20.3131%" y="287.50">[unknown]</text></g><g><title>[unknown] (14,547,983 samples, 9.62%)</title><rect x="20.2457%" y="261" width="9.6157%" height="15" fill="rgb(253,215,40)" fg:x="30630517" fg:w="14547983"/><text x="20.4957%" y="271.50">[unknown]</text></g><g><title>[unknown] (14,547,983 samples, 9.62%)</title><rect x="20.2457%" y="245" width="9.6157%" height="15" fill="rgb(211,81,21)" fg:x="30630517" fg:w="14547983"/><text x="20.4957%" y="255.50">[unknown]</text></g><g><title>[unknown] (14,547,983 samples, 9.62%)</title><rect x="20.2457%" y="229" width="9.6157%" height="15" fill="rgb(208,190,38)" fg:x="30630517" fg:w="14547983"/><text x="20.4957%" y="239.50">[unknown]</text></g><g><title>[unknown] (14,547,983 samples, 9.62%)</title><rect x="20.2457%" y="213" width="9.6157%" height="15" fill="rgb(235,213,38)" fg:x="30630517" fg:w="14547983"/><text x="20.4957%" y="223.50">[unknown]</text></g><g><title>[unknown] (14,173,051 samples, 9.37%)</title><rect x="20.4935%" y="197" width="9.3679%" height="15" fill="rgb(237,122,38)" fg:x="31005449" fg:w="14173051"/><text x="20.7435%" y="207.50">[unknown]</text></g><g><title>[unknown] (13,169,601 samples, 8.70%)</title><rect x="21.1568%" y="181" width="8.7047%" height="15" fill="rgb(244,218,35)" fg:x="32008899" fg:w="13169601"/><text x="21.4068%" y="191.50">[unknown]</text></g><g><title>[unknown] (7,442,744 samples, 4.92%)</title><rect x="24.9420%" y="165" width="4.9194%" height="15" fill="rgb(240,68,47)" fg:x="37735756" fg:w="7442744"/><text x="25.1920%" y="175.50">[unkno..</text></g><g><title>[unknown] (6,126,434 samples, 4.05%)</title><rect x="25.8121%" y="149" width="4.0494%" height="15" fill="rgb(210,16,53)" fg:x="39052066" fg:w="6126434"/><text x="26.0621%" y="159.50">[unk..</text></g><g><title>[unknown] (5,927,960 samples, 3.92%)</title><rect x="25.9433%" y="133" width="3.9182%" height="15" fill="rgb(235,124,12)" fg:x="39250540" fg:w="5927960"/><text x="26.1933%" y="143.50">[unk..</text></g><g><title>[unknown] (4,499,615 samples, 2.97%)</title><rect x="26.8874%" y="117" width="2.9741%" height="15" fill="rgb(224,169,11)" fg:x="40678885" fg:w="4499615"/><text x="27.1374%" y="127.50">[un..</text></g><g><title>[unknown] (1,060,017 samples, 0.70%)</title><rect x="29.1608%" y="101" width="0.7006%" height="15" fill="rgb(250,166,2)" fg:x="44118483" fg:w="1060017"/><text x="29.4108%" y="111.50"></text></g><g><title>[unknown] (779,142 samples, 0.51%)</title><rect x="29.3465%" y="85" width="0.5150%" height="15" fill="rgb(242,216,29)" fg:x="44399358" fg:w="779142"/><text x="29.5965%" y="95.50"></text></g><g><title>[unknown] (560,268 samples, 0.37%)</title><rect x="29.4911%" y="69" width="0.3703%" height="15" fill="rgb(230,116,27)" fg:x="44618232" fg:w="560268"/><text x="29.7411%" y="79.50"></text></g><g><title>[unknown] (560,268 samples, 0.37%)</title><rect x="29.4911%" y="53" width="0.3703%" height="15" fill="rgb(228,99,48)" fg:x="44618232" fg:w="560268"/><text x="29.7411%" y="63.50"></text></g><g><title>[unknown] (283,817 samples, 0.19%)</title><rect x="29.6739%" y="37" width="0.1876%" height="15" fill="rgb(253,11,6)" fg:x="44894683" fg:w="283817"/><text x="29.9239%" y="47.50"></text></g><g><title>core::fmt::Arguments::new_const (181,527 samples, 0.12%)</title><rect x="29.8614%" y="517" width="0.1200%" height="15" fill="rgb(247,143,39)" fg:x="45178500" fg:w="181527"/><text x="30.1114%" y="527.50"></text></g><g><title>dp_ex::static_dp (32,674,473 samples, 21.60%)</title><rect x="29.8614%" y="549" width="21.5967%" height="15" fill="rgb(236,97,10)" fg:x="45178500" fg:w="32674473"/><text x="30.1114%" y="559.50">dp_ex::static_dp</text></g><g><title>&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak (32,674,473 samples, 21.60%)</title><rect x="29.8614%" y="533" width="21.5967%" height="15" fill="rgb(233,208,19)" fg:x="45178500" fg:w="32674473"/><text x="30.1114%" y="543.50">&lt;dp_ex::Cat as dp_ex::Animal&gt;::spe..</text></g><g><title>std::io::stdio::_print (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="517" width="21.4767%" height="15" fill="rgb(216,164,2)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="527.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="501" width="21.4767%" height="15" fill="rgb(220,129,5)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="511.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="485" width="21.4767%" height="15" fill="rgb(242,17,10)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="495.50">&lt;std::io::stdio::Stdout as std::io..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="469" width="21.4767%" height="15" fill="rgb(242,107,0)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="479.50">&lt;&amp;std::io::stdio::Stdout as std::i..</text></g><g><title>std::io::Write::write_fmt (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="453" width="21.4767%" height="15" fill="rgb(251,28,31)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="463.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="437" width="21.4767%" height="15" fill="rgb(233,223,10)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="447.50">core::fmt::write</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="421" width="21.4767%" height="15" fill="rgb(215,21,27)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="431.50">&lt;std::io::Write::write_fmt::Adapte..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="405" width="21.4767%" height="15" fill="rgb(232,23,21)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="415.50">&lt;std::io::stdio::StdoutLock as std..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="389" width="21.4767%" height="15" fill="rgb(244,5,23)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="399.50">&lt;std::io::buffered::linewriter::Li..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="373" width="21.4767%" height="15" fill="rgb(226,81,46)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="383.50">&lt;std::io::buffered::linewritershim..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="357" width="21.4767%" height="15" fill="rgb(247,70,30)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="367.50">&lt;std::io::stdio::StdoutRaw as std:..</text></g><g><title>std::io::Write::write_all (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="341" width="21.4767%" height="15" fill="rgb(212,68,19)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="351.50">std::io::Write::write_all</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="325" width="21.4767%" height="15" fill="rgb(240,187,13)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="335.50">&lt;std::sys::stdio::unix::Stdout as ..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="309" width="21.4767%" height="15" fill="rgb(223,113,26)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="319.50">std::sys::pal::unix::fd::FileDesc:..</text></g><g><title>__GI___libc_write (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="293" width="21.4767%" height="15" fill="rgb(206,192,2)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="303.50">__GI___libc_write</text></g><g><title>[unknown] (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="277" width="21.4767%" height="15" fill="rgb(241,108,4)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="287.50">[unknown]</text></g><g><title>[unknown] (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="261" width="21.4767%" height="15" fill="rgb(247,173,49)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="271.50">[unknown]</text></g><g><title>[unknown] (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="245" width="21.4767%" height="15" fill="rgb(224,114,35)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="255.50">[unknown]</text></g><g><title>[unknown] (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="229" width="21.4767%" height="15" fill="rgb(245,159,27)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="239.50">[unknown]</text></g><g><title>[unknown] (32,492,946 samples, 21.48%)</title><rect x="29.9814%" y="213" width="21.4767%" height="15" fill="rgb(245,172,44)" fg:x="45360027" fg:w="32492946"/><text x="30.2314%" y="223.50">[unknown]</text></g><g><title>[unknown] (32,312,935 samples, 21.36%)</title><rect x="30.1004%" y="197" width="21.3577%" height="15" fill="rgb(236,23,11)" fg:x="45540038" fg:w="32312935"/><text x="30.3504%" y="207.50">[unknown]</text></g><g><title>[unknown] (31,758,674 samples, 20.99%)</title><rect x="30.4668%" y="181" width="20.9914%" height="15" fill="rgb(205,117,38)" fg:x="46094299" fg:w="31758674"/><text x="30.7168%" y="191.50">[unknown]</text></g><g><title>[unknown] (28,263,945 samples, 18.68%)</title><rect x="32.7767%" y="165" width="18.6815%" height="15" fill="rgb(237,72,25)" fg:x="49589028" fg:w="28263945"/><text x="33.0267%" y="175.50">[unknown]</text></g><g><title>[unknown] (26,229,795 samples, 17.34%)</title><rect x="34.1212%" y="149" width="17.3370%" height="15" fill="rgb(244,70,9)" fg:x="51623178" fg:w="26229795"/><text x="34.3712%" y="159.50">[unknown]</text></g><g><title>[unknown] (23,082,588 samples, 15.26%)</title><rect x="36.2014%" y="133" width="15.2568%" height="15" fill="rgb(217,125,39)" fg:x="54770385" fg:w="23082588"/><text x="36.4514%" y="143.50">[unknown]</text></g><g><title>[unknown] (16,432,900 samples, 10.86%)</title><rect x="40.5966%" y="117" width="10.8616%" height="15" fill="rgb(235,36,10)" fg:x="61420073" fg:w="16432900"/><text x="40.8466%" y="127.50">[unknown]</text></g><g><title>[unknown] (6,634,146 samples, 4.38%)</title><rect x="47.0732%" y="101" width="4.3849%" height="15" fill="rgb(251,123,47)" fg:x="71218827" fg:w="6634146"/><text x="47.3232%" y="111.50">[unkn..</text></g><g><title>[unknown] (1,668,672 samples, 1.10%)</title><rect x="50.3552%" y="85" width="1.1029%" height="15" fill="rgb(221,13,13)" fg:x="76184301" fg:w="1668672"/><text x="50.6052%" y="95.50"></text></g><g><title>[unknown] (1,483,724 samples, 0.98%)</title><rect x="50.4775%" y="69" width="0.9807%" height="15" fill="rgb(238,131,9)" fg:x="76369249" fg:w="1483724"/><text x="50.7275%" y="79.50"></text></g><g><title>[unknown] (925,385 samples, 0.61%)</title><rect x="50.8465%" y="53" width="0.6116%" height="15" fill="rgb(211,50,8)" fg:x="76927588" fg:w="925385"/><text x="51.0965%" y="63.50"></text></g><g><title>[unknown] (369,022 samples, 0.24%)</title><rect x="51.2142%" y="37" width="0.2439%" height="15" fill="rgb(245,182,24)" fg:x="77483951" fg:w="369022"/><text x="51.4642%" y="47.50"></text></g><g><title>dp_ex::static_dp_rand (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="549" width="24.9626%" height="15" fill="rgb(242,14,37)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="559.50">dp_ex::static_dp_rand</text></g><g><title>&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="533" width="24.9626%" height="15" fill="rgb(246,228,12)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="543.50">&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak</text></g><g><title>std::io::stdio::_print (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="517" width="24.9626%" height="15" fill="rgb(213,55,15)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="527.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="501" width="24.9626%" height="15" fill="rgb(209,9,3)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="511.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="485" width="24.9626%" height="15" fill="rgb(230,59,30)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="495.50">&lt;std::io::stdio::Stdout as std::io::Writ..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="469" width="24.9626%" height="15" fill="rgb(209,121,21)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="479.50">&lt;&amp;std::io::stdio::Stdout as std::io::Wri..</text></g><g><title>std::io::Write::write_fmt (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="453" width="24.9626%" height="15" fill="rgb(220,109,13)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="463.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="437" width="24.9626%" height="15" fill="rgb(232,18,1)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="447.50">core::fmt::write</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="421" width="24.9626%" height="15" fill="rgb(215,41,42)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="431.50">&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; a..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="405" width="24.9626%" height="15" fill="rgb(224,123,36)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="415.50">&lt;std::io::stdio::StdoutLock as std::io::..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="389" width="24.9626%" height="15" fill="rgb(240,125,3)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="399.50">&lt;std::io::buffered::linewriter::LineWrit..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="373" width="24.9626%" height="15" fill="rgb(205,98,50)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="383.50">&lt;std::io::buffered::linewritershim::Line..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="357" width="24.9626%" height="15" fill="rgb(205,185,37)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="367.50">&lt;std::io::stdio::StdoutRaw as std::io::W..</text></g><g><title>std::io::Write::write_all (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="341" width="24.9626%" height="15" fill="rgb(238,207,15)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="351.50">std::io::Write::write_all</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="325" width="24.9626%" height="15" fill="rgb(213,199,42)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="335.50">&lt;std::sys::stdio::unix::Stdout as std::i..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="309" width="24.9626%" height="15" fill="rgb(235,201,11)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="319.50">std::sys::pal::unix::fd::FileDesc::write</text></g><g><title>__GI___libc_write (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="293" width="24.9626%" height="15" fill="rgb(207,46,11)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="303.50">__GI___libc_write</text></g><g><title>[unknown] (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="277" width="24.9626%" height="15" fill="rgb(241,35,35)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="287.50">[unknown]</text></g><g><title>[unknown] (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="261" width="24.9626%" height="15" fill="rgb(243,32,47)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="271.50">[unknown]</text></g><g><title>[unknown] (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="245" width="24.9626%" height="15" fill="rgb(247,202,23)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="255.50">[unknown]</text></g><g><title>[unknown] (37,766,824 samples, 24.96%)</title><rect x="51.4582%" y="229" width="24.9626%" height="15" fill="rgb(219,102,11)" fg:x="77852973" fg:w="37766824"/><text x="51.7082%" y="239.50">[unknown]</text></g><g><title>[unknown] (37,534,955 samples, 24.81%)</title><rect x="51.6114%" y="213" width="24.8093%" height="15" fill="rgb(243,110,44)" fg:x="78084842" fg:w="37534955"/><text x="51.8614%" y="223.50">[unknown]</text></g><g><title>[unknown] (37,534,955 samples, 24.81%)</title><rect x="51.6114%" y="197" width="24.8093%" height="15" fill="rgb(222,74,54)" fg:x="78084842" fg:w="37534955"/><text x="51.8614%" y="207.50">[unknown]</text></g><g><title>[unknown] (35,629,553 samples, 23.55%)</title><rect x="52.8708%" y="181" width="23.5499%" height="15" fill="rgb(216,99,12)" fg:x="79990244" fg:w="35629553"/><text x="53.1208%" y="191.50">[unknown]</text></g><g><title>[unknown] (29,010,712 samples, 19.18%)</title><rect x="57.2456%" y="165" width="19.1751%" height="15" fill="rgb(226,22,26)" fg:x="86609085" fg:w="29010712"/><text x="57.4956%" y="175.50">[unknown]</text></g><g><title>[unknown] (26,886,269 samples, 17.77%)</title><rect x="58.6498%" y="149" width="17.7709%" height="15" fill="rgb(217,163,10)" fg:x="88733528" fg:w="26886269"/><text x="58.8998%" y="159.50">[unknown]</text></g><g><title>[unknown] (23,521,650 samples, 15.55%)</title><rect x="60.8737%" y="133" width="15.5470%" height="15" fill="rgb(213,25,53)" fg:x="92098147" fg:w="23521650"/><text x="61.1237%" y="143.50">[unknown]</text></g><g><title>[unknown] (19,360,106 samples, 12.80%)</title><rect x="63.6244%" y="117" width="12.7964%" height="15" fill="rgb(252,105,26)" fg:x="96259691" fg:w="19360106"/><text x="63.8744%" y="127.50">[unknown]</text></g><g><title>[unknown] (8,749,343 samples, 5.78%)</title><rect x="70.6377%" y="101" width="5.7830%" height="15" fill="rgb(220,39,43)" fg:x="106870454" fg:w="8749343"/><text x="70.8877%" y="111.50">[unknow..</text></g><g><title>[unknown] (5,408,115 samples, 3.57%)</title><rect x="72.8462%" y="85" width="3.5746%" height="15" fill="rgb(229,68,48)" fg:x="110211682" fg:w="5408115"/><text x="73.0962%" y="95.50">[unk..</text></g><g><title>[unknown] (2,733,189 samples, 1.81%)</title><rect x="74.6142%" y="69" width="1.8065%" height="15" fill="rgb(252,8,32)" fg:x="112886608" fg:w="2733189"/><text x="74.8642%" y="79.50">[..</text></g><g><title>[unknown] (1,833,925 samples, 1.21%)</title><rect x="75.2086%" y="53" width="1.2122%" height="15" fill="rgb(223,20,43)" fg:x="113785872" fg:w="1833925"/><text x="75.4586%" y="63.50"></text></g><g><title>[unknown] (709,209 samples, 0.47%)</title><rect x="75.9520%" y="37" width="0.4688%" height="15" fill="rgb(229,81,49)" fg:x="114910588" fg:w="709209"/><text x="76.2020%" y="47.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="805" width="99.1332%" height="15" fill="rgb(236,28,36)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="815.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="789" width="99.1332%" height="15" fill="rgb(249,185,26)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="799.50">__libc_start_call_main</text></g><g><title>main (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="773" width="99.1332%" height="15" fill="rgb(249,174,33)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="783.50">main</text></g><g><title>std::rt::lang_start_internal (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="757" width="99.1332%" height="15" fill="rgb(233,201,37)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="767.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="741" width="99.1332%" height="15" fill="rgb(221,78,26)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="725" width="99.1332%" height="15" fill="rgb(250,127,30)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="709" width="99.1332%" height="15" fill="rgb(230,49,44)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="719.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="693" width="99.1332%" height="15" fill="rgb(229,67,23)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="703.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="677" width="99.1332%" height="15" fill="rgb(249,83,47)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="661" width="99.1332%" height="15" fill="rgb(215,43,3)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="645" width="99.1332%" height="15" fill="rgb(238,154,13)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="655.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="629" width="99.1332%" height="15" fill="rgb(219,56,2)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="639.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="613" width="99.1332%" height="15" fill="rgb(233,0,4)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="623.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="597" width="99.1332%" height="15" fill="rgb(235,30,7)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="607.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="581" width="99.1332%" height="15" fill="rgb(250,79,13)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>dp_ex::main (149,982,367 samples, 99.13%)</title><rect x="0.0000%" y="565" width="99.1332%" height="15" fill="rgb(211,146,34)" fg:x="1" fg:w="149982367"/><text x="0.2500%" y="575.50">dp_ex::main</text></g><g><title>dp_ex::static_dp_rand_dummy (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="549" width="22.7125%" height="15" fill="rgb(228,22,38)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="559.50">dp_ex::static_dp_rand_dummy</text></g><g><title>&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="533" width="22.7125%" height="15" fill="rgb(235,168,5)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="543.50">&lt;dp_ex::Cat as dp_ex::Animal&gt;::speak</text></g><g><title>std::io::stdio::_print (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="517" width="22.7125%" height="15" fill="rgb(221,155,16)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="527.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="501" width="22.7125%" height="15" fill="rgb(215,215,53)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="511.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="485" width="22.7125%" height="15" fill="rgb(223,4,10)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="495.50">&lt;std::io::stdio::Stdout as std::io::..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="469" width="22.7125%" height="15" fill="rgb(234,103,6)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="479.50">&lt;&amp;std::io::stdio::Stdout as std::io:..</text></g><g><title>std::io::Write::write_fmt (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="453" width="22.7125%" height="15" fill="rgb(227,97,0)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="463.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="437" width="22.7125%" height="15" fill="rgb(234,150,53)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="447.50">core::fmt::write</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="421" width="22.7125%" height="15" fill="rgb(228,201,54)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="431.50">&lt;std::io::Write::write_fmt::Adapter&lt;..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="405" width="22.7125%" height="15" fill="rgb(222,22,37)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="415.50">&lt;std::io::stdio::StdoutLock as std::..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="389" width="22.7125%" height="15" fill="rgb(237,53,32)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="399.50">&lt;std::io::buffered::linewriter::Line..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="373" width="22.7125%" height="15" fill="rgb(233,25,53)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="383.50">&lt;std::io::buffered::linewritershim::..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="357" width="22.7125%" height="15" fill="rgb(210,40,34)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="367.50">&lt;std::io::stdio::StdoutRaw as std::i..</text></g><g><title>std::io::Write::write_all (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="341" width="22.7125%" height="15" fill="rgb(241,220,44)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="351.50">std::io::Write::write_all</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="325" width="22.7125%" height="15" fill="rgb(235,28,35)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="335.50">&lt;std::sys::stdio::unix::Stdout as st..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="309" width="22.7125%" height="15" fill="rgb(210,56,17)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="319.50">std::sys::pal::unix::fd::FileDesc::w..</text></g><g><title>__GI___libc_write (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="293" width="22.7125%" height="15" fill="rgb(224,130,29)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="303.50">__GI___libc_write</text></g><g><title>[unknown] (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="277" width="22.7125%" height="15" fill="rgb(235,212,8)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="287.50">[unknown]</text></g><g><title>[unknown] (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="261" width="22.7125%" height="15" fill="rgb(223,33,50)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="271.50">[unknown]</text></g><g><title>[unknown] (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="245" width="22.7125%" height="15" fill="rgb(219,149,13)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="255.50">[unknown]</text></g><g><title>[unknown] (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="229" width="22.7125%" height="15" fill="rgb(250,156,29)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="239.50">[unknown]</text></g><g><title>[unknown] (34,362,571 samples, 22.71%)</title><rect x="76.4207%" y="213" width="22.7125%" height="15" fill="rgb(216,193,19)" fg:x="115619797" fg:w="34362571"/><text x="76.6707%" y="223.50">[unknown]</text></g><g><title>[unknown] (34,138,546 samples, 22.56%)</title><rect x="76.5688%" y="197" width="22.5644%" height="15" fill="rgb(216,135,14)" fg:x="115843822" fg:w="34138546"/><text x="76.8188%" y="207.50">[unknown]</text></g><g><title>[unknown] (31,943,458 samples, 21.11%)</title><rect x="78.0197%" y="181" width="21.1135%" height="15" fill="rgb(241,47,5)" fg:x="118038910" fg:w="31943458"/><text x="78.2697%" y="191.50">[unknown]</text></g><g><title>[unknown] (26,781,234 samples, 17.70%)</title><rect x="81.4317%" y="165" width="17.7015%" height="15" fill="rgb(233,42,35)" fg:x="123201134" fg:w="26781234"/><text x="81.6817%" y="175.50">[unknown]</text></g><g><title>[unknown] (24,504,312 samples, 16.20%)</title><rect x="82.9367%" y="149" width="16.1965%" height="15" fill="rgb(231,13,6)" fg:x="125478056" fg:w="24504312"/><text x="83.1867%" y="159.50">[unknown]</text></g><g><title>[unknown] (22,021,544 samples, 14.56%)</title><rect x="84.5777%" y="133" width="14.5555%" height="15" fill="rgb(207,181,40)" fg:x="127960824" fg:w="22021544"/><text x="84.8277%" y="143.50">[unknown]</text></g><g><title>[unknown] (17,194,381 samples, 11.36%)</title><rect x="87.7683%" y="117" width="11.3649%" height="15" fill="rgb(254,173,49)" fg:x="132787987" fg:w="17194381"/><text x="88.0183%" y="127.50">[unknown]</text></g><g><title>[unknown] (10,098,863 samples, 6.68%)</title><rect x="92.4582%" y="101" width="6.6750%" height="15" fill="rgb(221,1,38)" fg:x="139883505" fg:w="10098863"/><text x="92.7082%" y="111.50">[unknown]</text></g><g><title>[unknown] (7,151,835 samples, 4.73%)</title><rect x="94.4061%" y="85" width="4.7271%" height="15" fill="rgb(206,124,46)" fg:x="142830533" fg:w="7151835"/><text x="94.6561%" y="95.50">[unkno..</text></g><g><title>[unknown] (4,210,260 samples, 2.78%)</title><rect x="96.3504%" y="69" width="2.7828%" height="15" fill="rgb(249,21,11)" fg:x="145772108" fg:w="4210260"/><text x="96.6004%" y="79.50">[u..</text></g><g><title>[unknown] (3,768,100 samples, 2.49%)</title><rect x="96.6426%" y="53" width="2.4906%" height="15" fill="rgb(222,201,40)" fg:x="146214268" fg:w="3768100"/><text x="96.8926%" y="63.50">[u..</text></g><g><title>[unknown] (581,805 samples, 0.38%)</title><rect x="98.7487%" y="37" width="0.3846%" height="15" fill="rgb(235,61,29)" fg:x="149400563" fg:w="581805"/><text x="98.9987%" y="47.50"></text></g><g><title>__GI___tunables_init (115,243 samples, 0.08%)</title><rect x="99.1339%" y="773" width="0.0762%" height="15" fill="rgb(219,207,3)" fg:x="149983362" fg:w="115243"/><text x="99.3839%" y="783.50"></text></g><g><title>all (151,293,745 samples, 100%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="151293745"/><text x="0.2500%" y="863.50"></text></g><g><title>dp-ex (151,293,745 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="151293745"/><text x="0.2500%" y="847.50">dp-ex</text></g><g><title>_start (151,293,745 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(231,124,27)" fg:x="0" fg:w="151293745"/><text x="0.2500%" y="831.50">_start</text></g><g><title>_dl_start (1,311,377 samples, 0.87%)</title><rect x="99.1332%" y="805" width="0.8668%" height="15" fill="rgb(249,195,6)" fg:x="149982368" fg:w="1311377"/><text x="99.3832%" y="815.50"></text></g><g><title>_dl_sysdep_start (1,310,383 samples, 0.87%)</title><rect x="99.1339%" y="789" width="0.8661%" height="15" fill="rgb(237,174,47)" fg:x="149983362" fg:w="1310383"/><text x="99.3839%" y="799.50"></text></g><g><title>dl_main (1,182,501 samples, 0.78%)</title><rect x="99.2184%" y="773" width="0.7816%" height="15" fill="rgb(206,201,31)" fg:x="150111244" fg:w="1182501"/><text x="99.4684%" y="783.50"></text></g><g><title>_dl_receive_error (1,182,501 samples, 0.78%)</title><rect x="99.2184%" y="757" width="0.7816%" height="15" fill="rgb(231,57,52)" fg:x="150111244" fg:w="1182501"/><text x="99.4684%" y="767.50"></text></g><g><title>version_check_doit (1,182,501 samples, 0.78%)</title><rect x="99.2184%" y="741" width="0.7816%" height="15" fill="rgb(248,177,22)" fg:x="150111244" fg:w="1182501"/><text x="99.4684%" y="751.50"></text></g><g><title>_dl_check_all_versions (1,182,501 samples, 0.78%)</title><rect x="99.2184%" y="725" width="0.7816%" height="15" fill="rgb(215,211,37)" fg:x="150111244" fg:w="1182501"/><text x="99.4684%" y="735.50"></text></g><g><title>_dl_check_map_versions (1,182,501 samples, 0.78%)</title><rect x="99.2184%" y="709" width="0.7816%" height="15" fill="rgb(241,128,51)" fg:x="150111244" fg:w="1182501"/><text x="99.4684%" y="719.50"></text></g></svg></svg>