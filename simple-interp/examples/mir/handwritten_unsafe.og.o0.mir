// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
// HINT: See also -Z dump-mir for MIR at specific points during compilation.
fn <impl at handwritten_unsafe.rs:3:10: 3:15>::clone(_1: &Type) -> Type {
    debug self => _1;
    let mut _0: Type;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb4, 1: bb3, 2: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _0 = Type::Dog;
        goto -> bb5;
    }

    bb3: {
        _0 = Type::Cat;
        goto -> bb5;
    }

    bb4: {
        _0 = Type::Bird;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at handwritten_unsafe.rs:3:17: 3:26>::eq(_1: &Type, _2: &Type) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_discr => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_discr => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(copy _3, copy _4);
        return;
    }
}

fn get_animal(_1: usize) -> Box<dyn Animal> {
    debug num => _1;
    let mut _0: std::boxed::Box<dyn Animal>;
    let mut _2: std::boxed::Box<Cat>;
    let mut _3: Cat;
    let mut _4: Type;
    let mut _5: std::boxed::Box<Dog>;
    let mut _6: Dog;
    let mut _7: Type;

    bb0: {
        switchInt(copy _1) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        _4 = Type::Cat;
        _3 = Cat { typeid: move _4 };
        _2 = Box::<Cat>::new(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = move _2 as std::boxed::Box<dyn Animal> (PointerCoercion(Unsize, Implicit));
        goto -> bb5;
    }

    bb3: {
        _7 = Type::Dog;
        _6 = Dog { typeid: move _7 };
        _5 = Box::<Dog>::new(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = move _5 as std::boxed::Box<dyn Animal> (PointerCoercion(Unsize, Implicit));
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at handwritten_unsafe.rs:36:1: 36:21>::speak(_1: &Bird) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let _4: &[&str; 1];

    bb0: {
        _4 = const <Bird as Animal>::speak::promoted[0];
        _3 = core::fmt::rt::<impl Arguments<'_>>::new_const::<1>(copy _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

const <impl at handwritten_unsafe.rs:36:1: 36:21>::speak::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "chirp\n"];
        _0 = &_1;
        return;
    }
}

alloc1 (size: 6, align: 1) {
    63 68 69 72 70 0a                               │ chirp.
}

fn <impl at handwritten_unsafe.rs:36:1: 36:21>::typeid(_1: &Bird) -> Type {
    debug self => _1;
    let mut _0: Type;
    let mut _2: &Type;

    bb0: {
        _2 = &((*_1).0: Type);
        _0 = <Type as Clone>::clone(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at handwritten_unsafe.rs:45:1: 45:20>::speak(_1: &Cat) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let _4: &[&str; 1];

    bb0: {
        _4 = const <Cat as Animal>::speak::promoted[0];
        _3 = core::fmt::rt::<impl Arguments<'_>>::new_const::<1>(copy _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

const <impl at handwritten_unsafe.rs:45:1: 45:20>::speak::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "meow\n"];
        _0 = &_1;
        return;
    }
}

alloc4 (size: 5, align: 1) {
    6d 65 6f 77 0a                                  │ meow.
}

fn <impl at handwritten_unsafe.rs:45:1: 45:20>::typeid(_1: &Cat) -> Type {
    debug self => _1;
    let mut _0: Type;
    let mut _2: &Type;

    bb0: {
        _2 = &((*_1).0: Type);
        _0 = <Type as Clone>::clone(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at handwritten_unsafe.rs:54:1: 54:20>::speak(_1: &Dog) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let _4: &[&str; 1];

    bb0: {
        _4 = const <Dog as Animal>::speak::promoted[0];
        _3 = core::fmt::rt::<impl Arguments<'_>>::new_const::<1>(copy _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

const <impl at handwritten_unsafe.rs:54:1: 54:20>::speak::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "woof\n"];
        _0 = &_1;
        return;
    }
}

alloc7 (size: 5, align: 1) {
    77 6f 6f 66 0a                                  │ woof.
}

fn <impl at handwritten_unsafe.rs:54:1: 54:20>::typeid(_1: &Dog) -> Type {
    debug self => _1;
    let mut _0: Type;
    let mut _2: &Type;

    bb0: {
        _2 = &((*_1).0: Type);
        _0 = <Type as Clone>::clone(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::string::String>;
    let mut _2: std::env::Args;
    let mut _3: usize;
    let mut _4: &std::vec::Vec<std::string::String>;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let _7: &[&str; 1];
    let mut _9: std::result::Result<usize, std::num::ParseIntError>;
    let _10: &str;
    let _11: &std::string::String;
    let mut _12: &std::vec::Vec<std::string::String>;
    let mut _15: &dyn Animal;
    let mut _17: *mut dyn Animal;
    let mut _18: std::boxed::Box<dyn Animal>;
    let mut _19: bool;
    let mut _20: &Type;
    let mut _21: &Type;
    let _22: &Cat;
    let _23: ();
    let mut _24: bool;
    let mut _25: &Type;
    let mut _26: &Type;
    let _27: &Dog;
    let _28: ();
    let mut _29: bool;
    let mut _30: *const dyn Animal;
    scope 1 {
        debug args => _1;
        let _8: usize;
        scope 2 {
            debug num => _8;
            let _13: std::boxed::Box<dyn Animal>;
            scope 3 {
                debug animal => _13;
                let _14: Type;
                scope 4 {
                    debug typeid => _14;
                    let _16: *const ();
                    scope 5 {
                        debug rawptr => _16;
                        scope 6 {
                            debug cat => _22;
                        }
                        scope 7 {
                            debug dog => _27;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _29 = const false;
        _2 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_1;
        _3 = Vec::<String>::len(move _4) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        switchInt(copy _3) -> [1: bb5, otherwise: bb4];
    }

    bb4: {
        _12 = &_1;
        _11 = <Vec<String> as Index<usize>>::index(move _12, const 1_usize) -> [return: bb7, unwind: bb22];
    }

    bb5: {
        _7 = const main::promoted[2];
        _6 = core::fmt::rt::<impl Arguments<'_>>::new_const::<1>(copy _7) -> [return: bb6, unwind: bb22];
    }

    bb6: {
        _5 = _print(move _6) -> [return: bb26, unwind: bb22];
    }

    bb7: {
        _10 = <String as Deref>::deref(copy _11) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        _9 = core::str::<impl str>::parse::<usize>(copy _10) -> [return: bb9, unwind: bb22];
    }

    bb9: {
        _8 = Result::<usize, ParseIntError>::unwrap(move _9) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        _13 = get_animal(copy _8) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _29 = const true;
        _30 = copy ((_13.0: std::ptr::Unique<dyn Animal>).0: std::ptr::NonNull<dyn Animal>) as *const dyn Animal (Transmute);
        _15 = &(*_30);
        _14 = <dyn Animal as Animal>::typeid(move _15) -> [return: bb12, unwind: bb25];
    }

    bb12: {
        _29 = const false;
        _18 = move _13;
        _17 = Box::<dyn Animal>::into_raw(move _18) -> [return: bb13, unwind: bb25];
    }

    bb13: {
        _16 = move _17 as *const () (PtrToPtr);
        _20 = &_14;
        _21 = const main::promoted[1];
        _19 = <Type as PartialEq>::eq(move _20, move _21) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        switchInt(move _19) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _22 = copy _16 as &Cat (Transmute);
        _23 = <Cat as Animal>::speak(copy _22) -> [return: bb27, unwind: bb25];
    }

    bb16: {
        _25 = &_14;
        _26 = const main::promoted[0];
        _24 = <Type as PartialEq>::eq(move _25, move _26) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        switchInt(move _24) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _27 = copy _16 as &Dog (Transmute);
        _28 = <Dog as Animal>::speak(copy _27) -> [return: bb28, unwind: bb25];
    }

    bb19: {
        _29 = const false;
        goto -> bb20;
    }

    bb20: {
        drop(_1) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_1) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24 (cleanup): {
        drop(_13) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(copy _29) -> [0: bb22, otherwise: bb24];
    }

    bb26: {
        goto -> bb20;
    }

    bb27: {
        goto -> bb19;
    }

    bb28: {
        goto -> bb19;
    }
}

const main::promoted[0]: &Type = {
    let mut _0: &Type;
    let mut _1: Type;

    bb0: {
        _1 = Type::Dog;
        _0 = &_1;
        return;
    }
}

const main::promoted[1]: &Type = {
    let mut _0: &Type;
    let mut _1: Type;

    bb0: {
        _1 = Type::Cat;
        _0 = &_1;
        return;
    }
}

const main::promoted[2]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Pass in a number and see what happens!\n"];
        _0 = &_1;
        return;
    }
}

alloc10 (size: 39, align: 1) {
    0x00 │ 50 61 73 73 20 69 6e 20 61 20 6e 75 6d 62 65 72 │ Pass in a number
    0x10 │ 20 61 6e 64 20 73 65 65 20 77 68 61 74 20 68 61 │  and see what ha
    0x20 │ 70 70 65 6e 73 21 0a                            │ ppens!.
}
