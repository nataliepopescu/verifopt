// MIR for `main` before ReplaceDynamicDispatch

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::string::String>;
    let mut _2: std::env::Args;
    let mut _3: usize;
    let mut _4: &std::vec::Vec<std::string::String>;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str; 1];
    let _8: &[&str; 1];
    let _9: [&str; 1];
    let mut _11: std::result::Result<usize, std::num::ParseIntError>;
    let mut _12: &str;
    let _13: &str;
    let mut _14: &std::string::String;
    let _15: &std::string::String;
    let mut _16: &std::vec::Vec<std::string::String>;
    let mut _18: usize;
    let _21: ();
    let mut _22: &dyn Animal;
    let mut _24: *const dyn Animal;
    scope 1 {
        debug args => _1;
        let _10: usize;
        let mut _23: &[&str; 1];
        scope 2 {
            debug num => _10;
            let _17: std::boxed::Box<dyn Animal>;
            scope 3 {
                debug animal => _17;
                let _19: std::boxed::Box<dyn Animal>;
                scope 4 {
                    debug cat => _19;
                    let _20: std::boxed::Box<dyn Animal>;
                    scope 5 {
                        debug dog => _20;
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        StorageDead(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_1;
        _3 = Vec::<String>::len(move _4) -> [return: bb3, unwind: bb24];
    }

    bb3: {
        StorageDead(_4);
        switchInt(copy _3) -> [1: bb5, otherwise: bb4];
    }

    bb4: {
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_1;
        _15 = <Vec<String> as Index<usize>>::index(move _16, const 1_usize) -> [return: bb8, unwind: bb24];
    }

    bb5: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _23 = const main::promoted[0];
        _8 = &(*_23);
        _7 = &(*_8);
        _6 = core::fmt::rt::<impl Arguments<'_>>::new_const::<1>(move _7) -> [return: bb6, unwind: bb24];
    }

    bb6: {
        StorageDead(_7);
        _5 = _print(move _6) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        StorageDead(_6);
        StorageDead(_8);
        StorageDead(_5);
        _0 = const ();
        goto -> bb19;
    }

    bb8: {
        _14 = &(*_15);
        _13 = <String as Deref>::deref(move _14) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _12 = &(*_13);
        StorageDead(_16);
        StorageDead(_14);
        _11 = core::str::<impl str>::parse::<usize>(move _12) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        StorageDead(_12);
        _10 = Result::<usize, ParseIntError>::unwrap(move _11) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        StorageDead(_11);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_17);
        StorageLive(_18);
        _18 = copy _10;
        _17 = get_animal(move _18) -> [return: bb12, unwind: bb24];
    }

    bb12: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = get_cat() -> [return: bb13, unwind: bb23];
    }

    bb13: {
        StorageLive(_20);
        _20 = get_dog() -> [return: bb14, unwind: bb22];
    }

    bb14: {
        StorageLive(_21);
        StorageLive(_22);
        _24 = copy ((_17.0: std::ptr::Unique<dyn Animal>).0: std::ptr::NonNull<dyn Animal>) as *const dyn Animal (Transmute);
        _22 = &(*_24);
        _21 = <dyn Animal as Animal>::speak(move _22) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        StorageDead(_22);
        StorageDead(_21);
        _0 = const ();
        drop(_20) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        StorageDead(_20);
        drop(_19) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        StorageDead(_19);
        drop(_17) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        StorageDead(_17);
        StorageDead(_10);
        goto -> bb19;
    }

    bb19: {
        drop(_1) -> [return: bb20, unwind: bb25];
    }

    bb20: {
        StorageDead(_1);
        StorageDead(_3);
        return;
    }

    bb21 (cleanup): {
        drop(_20) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_19) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_17) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_1) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }
}
