// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
// HINT: See also -Z dump-mir for MIR at specific points during compilation.
fn get_animal(_1: usize) -> Box<dyn Animal> {
    debug num => _1;
    let mut _0: std::boxed::Box<dyn Animal>;
    let mut _2: std::boxed::Box<Cat>;
    let mut _3: std::boxed::Box<Dog>;

    bb0: {
        switchInt(move _1) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        StorageLive(_2);
        _2 = Box::<Cat>::new(const Cat {{  }}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = move _2 as std::boxed::Box<dyn Animal> (PointerCoercion(Unsize, Implicit));
        StorageDead(_2);
        goto -> bb5;
    }

    bb3: {
        StorageLive(_3);
        _3 = Box::<Dog>::new(const Dog {{  }}) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = move _3 as std::boxed::Box<dyn Animal> (PointerCoercion(Unsize, Implicit));
        StorageDead(_3);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at original.rs:20:1: 20:21>::speak(_1: &Bird) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    scope 1 (inlined core::fmt::rt::<impl Arguments<'_>>::new_const::<1>) {
        let mut _4: &[&str];
        let mut _5: &[core::fmt::rt::Argument<'_>];
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = const <Bird as Animal>::speak::promoted[0] as &[&str] (PointerCoercion(Unsize, Implicit));
        StorageLive(_5);
        _5 = const core::fmt::rt::<impl std::fmt::Arguments<'_>>::new_const::<1>::promoted[0] as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize, Implicit));
        _3 = Arguments::<'_> { pieces: move _4, fmt: const Option::<&[core::fmt::rt::Placeholder]>::None, args: move _5 };
        StorageDead(_5);
        StorageDead(_4);
        _2 = _print(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        return;
    }
}

alloc13 (size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

const <impl at original.rs:20:1: 20:21>::speak::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "chirp\n"];
        _0 = &_1;
        return;
    }
}

alloc1 (size: 6, align: 1) {
    63 68 69 72 70 0a                               │ chirp.
}

fn <impl at original.rs:26:1: 26:20>::speak(_1: &Cat) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    scope 1 (inlined core::fmt::rt::<impl Arguments<'_>>::new_const::<1>) {
        let mut _4: &[&str];
        let mut _5: &[core::fmt::rt::Argument<'_>];
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = const <Cat as Animal>::speak::promoted[0] as &[&str] (PointerCoercion(Unsize, Implicit));
        StorageLive(_5);
        _5 = const core::fmt::rt::<impl std::fmt::Arguments<'_>>::new_const::<1>::promoted[0] as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize, Implicit));
        _3 = Arguments::<'_> { pieces: move _4, fmt: const Option::<&[core::fmt::rt::Placeholder]>::None, args: move _5 };
        StorageDead(_5);
        StorageDead(_4);
        _2 = _print(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        return;
    }
}

alloc13 (size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

const <impl at original.rs:26:1: 26:20>::speak::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "meow\n"];
        _0 = &_1;
        return;
    }
}

alloc4 (size: 5, align: 1) {
    6d 65 6f 77 0a                                  │ meow.
}

fn <impl at original.rs:32:1: 32:20>::speak(_1: &Dog) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    scope 1 (inlined core::fmt::rt::<impl Arguments<'_>>::new_const::<1>) {
        let mut _4: &[&str];
        let mut _5: &[core::fmt::rt::Argument<'_>];
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = const <Dog as Animal>::speak::promoted[0] as &[&str] (PointerCoercion(Unsize, Implicit));
        StorageLive(_5);
        _5 = const core::fmt::rt::<impl std::fmt::Arguments<'_>>::new_const::<1>::promoted[0] as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize, Implicit));
        _3 = Arguments::<'_> { pieces: move _4, fmt: const Option::<&[core::fmt::rt::Placeholder]>::None, args: move _5 };
        StorageDead(_5);
        StorageDead(_4);
        _2 = _print(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        return;
    }
}

alloc13 (size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

const <impl at original.rs:32:1: 32:20>::speak::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "woof\n"];
        _0 = &_1;
        return;
    }
}

alloc7 (size: 5, align: 1) {
    77 6f 6f 66 0a                                  │ woof.
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::string::String>;
    let mut _2: std::env::Args;
    let mut _3: usize;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _7: std::result::Result<usize, std::num::ParseIntError>;
    let _8: &str;
    let _9: &std::string::String;
    let _11: ();
    let mut _12: &dyn Animal;
    let mut _13: *const dyn Animal;
    scope 1 {
        debug args => _1;
        let _6: usize;
        scope 2 {
            debug num => _6;
            let _10: std::boxed::Box<dyn Animal>;
            scope 3 {
                debug animal => _10;
            }
        }
        scope 4 (inlined Vec::<String>::len) {
            let mut _14: bool;
            scope 5 {
            }
        }
        scope 6 (inlined #[track_caller] <Vec<String> as Index<usize>>::index) {
            scope 7 (inlined <Vec<String> as Deref>::deref) {
                scope 8 (inlined Vec::<String>::as_slice) {
                    let mut _15: *const std::string::String;
                    let mut _16: usize;
                    scope 9 (inlined Vec::<String>::as_ptr) {
                        scope 10 (inlined alloc::raw_vec::RawVec::<String>::ptr) {
                            scope 11 (inlined alloc::raw_vec::RawVecInner::ptr::<String>) {
                                scope 12 (inlined alloc::raw_vec::RawVecInner::non_null::<String>) {
                                    let mut _17: std::ptr::NonNull<u8>;
                                    scope 13 (inlined Unique::<u8>::cast::<String>) {
                                        scope 14 (inlined NonNull::<u8>::cast::<String>) {
                                            scope 15 (inlined NonNull::<u8>::as_ptr) {
                                            }
                                        }
                                    }
                                    scope 16 (inlined Unique::<String>::as_non_null_ptr) {
                                    }
                                }
                                scope 17 (inlined NonNull::<String>::as_ptr) {
                                }
                            }
                        }
                    }
                    scope 18 (inlined #[track_caller] std::slice::from_raw_parts::<'_, String>) {
                        let _18: *const [std::string::String];
                        scope 19 (inlined core::ub_checks::check_language_ub) {
                            scope 20 (inlined core::ub_checks::check_language_ub::runtime) {
                            }
                        }
                        scope 21 (inlined std::mem::size_of::<String>) {
                        }
                        scope 22 (inlined std::mem::align_of::<String>) {
                        }
                        scope 23 (inlined slice_from_raw_parts::<String>) {
                            scope 24 (inlined std::ptr::from_raw_parts::<[String], String>) {
                            }
                        }
                    }
                }
            }
            scope 25 (inlined #[track_caller] core::slice::index::<impl Index<usize> for [String]>::index) {
                scope 26 (inlined #[track_caller] <usize as SliceIndex<[String]>>::index) {
                    let mut _19: bool;
                }
            }
        }
        scope 27 (inlined core::fmt::rt::<impl Arguments<'_>>::new_const::<1>) {
            let mut _20: &[&str];
            let mut _21: &[core::fmt::rt::Argument<'_>];
        }
        scope 28 (inlined <String as Deref>::deref) {
            scope 29 (inlined String::as_str) {
                let _22: &[u8];
                scope 30 (inlined Vec::<u8>::as_slice) {
                    let mut _23: *const u8;
                    let mut _24: usize;
                    scope 31 (inlined Vec::<u8>::as_ptr) {
                        scope 32 (inlined alloc::raw_vec::RawVec::<u8>::ptr) {
                            scope 33 (inlined alloc::raw_vec::RawVecInner::ptr::<u8>) {
                                scope 34 (inlined alloc::raw_vec::RawVecInner::non_null::<u8>) {
                                    let mut _25: std::ptr::NonNull<u8>;
                                    scope 35 (inlined Unique::<u8>::cast::<u8>) {
                                        scope 36 (inlined NonNull::<u8>::cast::<u8>) {
                                            scope 37 (inlined NonNull::<u8>::as_ptr) {
                                            }
                                        }
                                    }
                                    scope 38 (inlined Unique::<u8>::as_non_null_ptr) {
                                    }
                                }
                                scope 39 (inlined NonNull::<u8>::as_ptr) {
                                }
                            }
                        }
                    }
                    scope 40 (inlined #[track_caller] std::slice::from_raw_parts::<'_, u8>) {
                        let _26: *const [u8];
                        scope 41 (inlined core::ub_checks::check_language_ub) {
                            scope 42 (inlined core::ub_checks::check_language_ub::runtime) {
                            }
                        }
                        scope 43 (inlined std::mem::size_of::<u8>) {
                        }
                        scope 44 (inlined std::mem::align_of::<u8>) {
                        }
                        scope 45 (inlined slice_from_raw_parts::<u8>) {
                            scope 46 (inlined std::ptr::from_raw_parts::<[u8], u8>) {
                            }
                        }
                    }
                }
                scope 47 (inlined from_utf8_unchecked) {
                }
            }
        }
        scope 48 (inlined core::str::<impl str>::parse::<usize>) {
            scope 49 (inlined core::num::<impl FromStr for usize>::from_str) {
                scope 50 (inlined core::num::<impl usize>::from_str_radix) {
                    let _27: &[u8];
                    scope 51 (inlined core::str::<impl str>::as_bytes) {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_2);
        StorageLive(_3);
        _3 = copy (_1.1: usize);
        StorageLive(_14);
        _14 = Le(copy _3, const <std::string::String as std::mem::SizedTypeProperties>::MAX_SLICE_LEN);
        assume(move _14);
        StorageDead(_14);
        switchInt(copy _3) -> [1: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_7);
        StorageLive(_17);
        StorageLive(_15);
        _17 = copy ((((_1.0: alloc::raw_vec::RawVec<std::string::String>).0: alloc::raw_vec::RawVecInner).0: std::ptr::Unique<u8>).0: std::ptr::NonNull<u8>);
        _15 = copy _17 as *const std::string::String (Transmute);
        _16 = copy (_1.1: usize);
        _18 = *const [std::string::String] from (copy _15, copy _16);
        StorageDead(_15);
        StorageDead(_17);
        StorageLive(_19);
        _19 = Lt(const 1_usize, copy _16);
        assert(move _19, "index out of bounds: the length is {} but the index is {}", copy _16, const 1_usize) -> [success: bb15, unwind: bb13];
    }

    bb4: {
        StorageLive(_5);
        StorageLive(_20);
        _20 = const main::promoted[0] as &[&str] (PointerCoercion(Unsize, Implicit));
        StorageLive(_21);
        _21 = const core::fmt::rt::<impl std::fmt::Arguments<'_>>::new_const::<1>::promoted[0] as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize, Implicit));
        _5 = Arguments::<'_> { pieces: move _20, fmt: const Option::<&[core::fmt::rt::Placeholder]>::None, args: move _21 };
        StorageDead(_21);
        StorageDead(_20);
        _4 = _print(move _5) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        StorageDead(_5);
        goto -> bb10;
    }

    bb6: {
        StorageDead(_7);
        StorageLive(_10);
        _10 = get_animal(move _6) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        StorageLive(_12);
        _13 = copy ((_10.0: std::ptr::Unique<dyn Animal>).0: std::ptr::NonNull<dyn Animal>) as *const dyn Animal (Transmute);
        _12 = &(*_13);
        _11 = <dyn Animal as Animal>::speak(move _12) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        StorageDead(_12);
        drop(_10) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        StorageDead(_10);
        goto -> bb10;
    }

    bb10: {
        drop(_1) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_1);
        StorageDead(_3);
        return;
    }

    bb12 (cleanup): {
        drop(_10) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        _9 = &(*_18)[1 of 2];
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_25);
        StorageLive(_23);
        _25 = copy ((((((*_9).0: std::vec::Vec<u8>).0: alloc::raw_vec::RawVec<u8>).0: alloc::raw_vec::RawVecInner).0: std::ptr::Unique<u8>).0: std::ptr::NonNull<u8>);
        _23 = copy _25 as *const u8 (Transmute);
        StorageLive(_24);
        _24 = copy (((*_9).0: std::vec::Vec<u8>).1: usize);
        StorageLive(_26);
        _26 = *const [u8] from (copy _23, copy _24);
        _22 = &(*_26);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_25);
        _8 = copy _22 as &str (Transmute);
        StorageDead(_22);
        StorageLive(_27);
        _27 = copy _8 as &[u8] (Transmute);
        _7 = core::num::<impl usize>::from_ascii_radix(move _27, const 10_u32) -> [return: bb16, unwind: bb13];
    }

    bb16: {
        StorageDead(_27);
        _6 = Result::<usize, ParseIntError>::unwrap(move _7) -> [return: bb6, unwind: bb13];
    }
}

alloc13 (size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

const main::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Pass in a number and see what happens!\n"];
        _0 = &_1;
        return;
    }
}

alloc10 (size: 39, align: 1) {
    0x00 │ 50 61 73 73 20 69 6e 20 61 20 6e 75 6d 62 65 72 │ Pass in a number
    0x10 │ 20 61 6e 64 20 73 65 65 20 77 68 61 74 20 68 61 │  and see what ha
    0x20 │ 70 70 65 6e 73 21 0a                            │ ppens!.
}
