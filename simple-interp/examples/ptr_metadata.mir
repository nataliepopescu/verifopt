// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
// HINT: See also -Z dump-mir for MIR at specific points during compilation.
fn get_animal(_1: usize) -> Box<dyn Animal> {
    debug num => _1;
    let mut _0: std::boxed::Box<dyn Animal>;
    let mut _2: std::boxed::Box<Cat>;
    let mut _3: std::boxed::Box<Dog>;

    bb0: {
        switchInt(copy _1) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        _2 = Box::<Cat>::new(const Cat {{  }}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = move _2 as std::boxed::Box<dyn Animal> (PointerCoercion(Unsize, Implicit));
        goto -> bb5;
    }

    bb3: {
        _3 = Box::<Dog>::new(const Dog {{  }}) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = move _3 as std::boxed::Box<dyn Animal> (PointerCoercion(Unsize, Implicit));
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn get_cat() -> Box<dyn Animal> {
    let mut _0: std::boxed::Box<dyn Animal>;
    let mut _1: std::boxed::Box<Cat>;

    bb0: {
        _1 = Box::<Cat>::new(const Cat {{  }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = move _1 as std::boxed::Box<dyn Animal> (PointerCoercion(Unsize, Implicit));
        return;
    }
}

fn get_dog() -> Box<dyn Animal> {
    let mut _0: std::boxed::Box<dyn Animal>;
    let mut _1: std::boxed::Box<Dog>;

    bb0: {
        _1 = Box::<Dog>::new(const Dog {{  }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = move _1 as std::boxed::Box<dyn Animal> (PointerCoercion(Unsize, Implicit));
        return;
    }
}

fn <impl at ptr_metadata.rs:31:1: 31:20>::speak(_1: &Cat) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let _4: &[&str; 1];

    bb0: {
        _4 = const <Cat as Animal>::speak::promoted[0];
        _3 = core::fmt::rt::<impl Arguments<'_>>::new_const::<1>(copy _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

const <impl at ptr_metadata.rs:31:1: 31:20>::speak::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "meow\n"];
        _0 = &_1;
        return;
    }
}

alloc1 (size: 5, align: 1) {
    6d 65 6f 77 0a                                  │ meow.
}

fn <impl at ptr_metadata.rs:37:1: 37:20>::speak(_1: &Dog) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let _4: &[&str; 1];

    bb0: {
        _4 = const <Dog as Animal>::speak::promoted[0];
        _3 = core::fmt::rt::<impl Arguments<'_>>::new_const::<1>(copy _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

const <impl at ptr_metadata.rs:37:1: 37:20>::speak::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "woof\n"];
        _0 = &_1;
        return;
    }
}

alloc4 (size: 5, align: 1) {
    77 6f 6f 66 0a                                  │ woof.
}

fn run(_1: usize) -> () {
    debug num => _1;
    let mut _0: ();
    let _2: std::boxed::Box<dyn Animal>;
    let mut _6: *const dyn Animal;
    let _7: &dyn Animal;
    let mut _9: *const dyn Animal;
    let _10: &dyn Animal;
    let mut _12: *const dyn Animal;
    let _13: &dyn Animal;
    let mut _15: *mut dyn Animal;
    let mut _16: std::boxed::Box<dyn Animal>;
    let mut _17: bool;
    let mut _18: &std::ptr::DynMetadata<dyn Animal>;
    let mut _19: &std::ptr::DynMetadata<dyn Animal>;
    let _20: &Cat;
    let _21: ();
    let mut _22: bool;
    let mut _23: &std::ptr::DynMetadata<dyn Animal>;
    let mut _24: &std::ptr::DynMetadata<dyn Animal>;
    let _25: &Dog;
    let _26: ();
    let mut _27: bool;
    let mut _28: *const dyn Animal;
    let mut _29: *const dyn Animal;
    let mut _30: *const dyn Animal;
    scope 1 {
        debug animal => _2;
        let _3: std::boxed::Box<dyn Animal>;
        scope 2 {
            debug cat => _3;
            let _4: std::boxed::Box<dyn Animal>;
            scope 3 {
                debug dog => _4;
                let _5: std::ptr::DynMetadata<dyn Animal>;
                scope 4 {
                    debug animal_vtable => _5;
                    let _8: std::ptr::DynMetadata<dyn Animal>;
                    scope 5 {
                        debug cat_vtable => _8;
                        let _11: std::ptr::DynMetadata<dyn Animal>;
                        scope 6 {
                            debug dog_vtable => _11;
                            let _14: *const ();
                            scope 7 {
                                debug raw_animal => _14;
                                scope 8 {
                                    debug cat => _20;
                                }
                                scope 9 {
                                    debug dog => _25;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _27 = const false;
        _27 = const true;
        _2 = get_animal(copy _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = get_cat() -> [return: bb2, unwind: bb20];
    }

    bb2: {
        _4 = get_dog() -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _28 = copy ((_2.0: std::ptr::Unique<dyn Animal>).0: std::ptr::NonNull<dyn Animal>) as *const dyn Animal (Transmute);
        _7 = &(*_28);
        _6 = &raw const (*_7);
        _5 = std::ptr::metadata::<dyn Animal>(move _6) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        _29 = copy ((_3.0: std::ptr::Unique<dyn Animal>).0: std::ptr::NonNull<dyn Animal>) as *const dyn Animal (Transmute);
        _10 = &(*_29);
        _9 = &raw const (*_10);
        _8 = std::ptr::metadata::<dyn Animal>(move _9) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _30 = copy ((_4.0: std::ptr::Unique<dyn Animal>).0: std::ptr::NonNull<dyn Animal>) as *const dyn Animal (Transmute);
        _13 = &(*_30);
        _12 = &raw const (*_13);
        _11 = std::ptr::metadata::<dyn Animal>(move _12) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _27 = const false;
        _16 = move _2;
        _15 = Box::<dyn Animal>::into_raw(move _16) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _14 = move _15 as *const () (PtrToPtr);
        _18 = &_5;
        _19 = &_8;
        _17 = <DynMetadata<dyn Animal> as PartialEq>::eq(move _18, move _19) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        switchInt(move _17) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _20 = copy _14 as &Cat (Transmute);
        _21 = <Cat as Animal>::speak(copy _20) -> [return: bb21, unwind: bb16];
    }

    bb10: {
        _23 = &_5;
        _24 = &_11;
        _22 = <DynMetadata<dyn Animal> as PartialEq>::eq(move _23, move _24) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        switchInt(move _22) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _25 = copy _14 as &Dog (Transmute);
        _26 = <Dog as Animal>::speak(copy _25) -> [return: bb22, unwind: bb16];
    }

    bb13: {
        drop(_4) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        drop(_3) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _27 = const false;
        return;
    }

    bb16 (cleanup): {
        drop(_4) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        drop(_2) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(copy _27) -> [0: bb18, otherwise: bb19];
    }

    bb21: {
        goto -> bb13;
    }

    bb22: {
        goto -> bb13;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::string::String>;
    let mut _2: std::env::Args;
    let mut _3: usize;
    let mut _4: &std::vec::Vec<std::string::String>;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let _7: &[&str; 1];
    let mut _8: usize;
    let mut _9: std::result::Result<usize, std::num::ParseIntError>;
    let _10: &str;
    let _11: &std::string::String;
    let mut _12: &std::vec::Vec<std::string::String>;
    scope 1 {
        debug args => _1;
    }

    bb0: {
        _2 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_1;
        _3 = Vec::<String>::len(move _4) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        switchInt(copy _3) -> [1: bb5, otherwise: bb4];
    }

    bb4: {
        _12 = &_1;
        _11 = <Vec<String> as Index<usize>>::index(move _12, const 1_usize) -> [return: bb7, unwind: bb13];
    }

    bb5: {
        _7 = const main::promoted[0];
        _6 = core::fmt::rt::<impl Arguments<'_>>::new_const::<1>(copy _7) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _5 = _print(move _6) -> [return: bb15, unwind: bb13];
    }

    bb7: {
        _10 = <String as Deref>::deref(copy _11) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _9 = core::str::<impl str>::parse::<usize>(copy _10) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _8 = Result::<usize, ParseIntError>::unwrap(move _9) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        _0 = run(move _8) -> [return: bb16, unwind: bb13];
    }

    bb11: {
        drop(_1) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        goto -> bb11;
    }

    bb16: {
        goto -> bb11;
    }
}

const main::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Pass in a number and see what happens!\n"];
        _0 = &_1;
        return;
    }
}

alloc7 (size: 39, align: 1) {
    0x00 │ 50 61 73 73 20 69 6e 20 61 20 6e 75 6d 62 65 72 │ Pass in a number
    0x10 │ 20 61 6e 64 20 73 65 65 20 77 68 61 74 20 68 61 │  and see what ha
    0x20 │ 70 70 65 6e 73 21 0a                            │ ppens!.
}
